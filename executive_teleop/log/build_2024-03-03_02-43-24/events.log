[0.000000] (-) TimerEvent: {}
[0.000245] (executive_teleop) JobQueued: {'identifier': 'executive_teleop', 'dependencies': OrderedDict()}
[0.000349] (executive_teleop) JobStarted: {'identifier': 'executive_teleop'}
[0.100261] (-) TimerEvent: {}
[0.139955] (executive_teleop) JobProgress: {'identifier': 'executive_teleop', 'progress': 'cmake'}
[0.141614] (executive_teleop) JobProgress: {'identifier': 'executive_teleop', 'progress': 'build'}
[0.141731] (executive_teleop) Command: {'cmd': ['/usr/bin/cmake', '--build', '/home/zyme/ros_ws/executive_teleop/executive_teleop/build/executive_teleop', '--', '-j12', '-l12'], 'cwd': '/home/zyme/ros_ws/executive_teleop/executive_teleop/build/executive_teleop', 'env': OrderedDict([('LESSOPEN', '| /usr/bin/lesspipe %s'), ('USER', 'zyme'), ('ROS_PACKAGE_PATH', '/home/zyme/ros_ws/astrobee/install/pmc/share:/home/zyme/ros_ws/astrobee/install/camera/share'), ('XDG_SESSION_TYPE', 'x11'), ('SHLVL', '1'), ('LD_LIBRARY_PATH', '/home/zyme/ros_ws/astrobee/install/states/lib:/home/zyme/ros_ws/astrobee/install/light_flow/lib:/home/zyme/ros_ws/astrobee/install/fam/lib:/home/zyme/ros_ws/astrobee/install/astrobee_gazebo/lib:/home/zyme/ros_ws/astrobee/install/perch/lib:/home/zyme/ros_ws/astrobee/install/framestore/lib:/home/zyme/ros_ws/astrobee/install/dock/lib:/home/zyme/ros_ws/astrobee/install/ctl/lib:/home/zyme/ros_ws/astrobee/install/arm/lib:/home/zyme/ros_ws/astrobee/install/access_control/lib:/home/zyme/ros_ws/astrobee/install/ff_util/lib:/home/zyme/ros_ws/astrobee/install/msg_conversions/lib:/home/zyme/ros_ws/astrobee/install/jsonloader/lib:/home/zyme/ros_ws/astrobee/install/ff_msgs/lib:/home/zyme/ros_ws/astrobee/install/ff_hw_msgs/lib:/home/zyme/ros_ws/astrobee/install/config_reader/lib:/home/zyme/ros_ws/astrobee/install/ff_common/lib:/usr/lib/x86_64-linux-gnu/gazebo-11/plugins:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib'), ('HOME', '/home/zyme'), ('OLDPWD', '/home/zyme/ros_ws/executive_teleop'), ('DESKTOP_SESSION', 'pop'), ('ROS_PYTHON_VERSION', '3'), ('GNOME_SHELL_SESSION_MODE', 'pop'), ('GTK_MODULES', 'gail:atk-bridge'), ('SYSTEMD_EXEC_PID', '2755'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('COLORTERM', 'truecolor'), ('QT_QPA_PLATFORMTHEME', 'qt5ct'), ('COLCON_PREFIX_PATH', '/home/zyme/ros_ws/executive_teleop/executive_teleop/install:/home/zyme/ros_ws/astrobee/install'), ('ROS_DISTRO', 'humble'), ('GTK_IM_MODULE', 'ibus'), ('LOGNAME', 'zyme'), ('_', '/usr/bin/colcon'), ('ROS_VERSION', '2'), ('PKG_CONFIG_PATH', '/home/zyme/ros_ws/astrobee/install/pmc/lib/x86_64-linux-gnu/pkgconfig:/home/zyme/ros_ws/astrobee/install/pmc/lib/pkgconfig:/home/zyme/ros_ws/astrobee/install/camera/lib/x86_64-linux-gnu/pkgconfig:/home/zyme/ros_ws/astrobee/install/camera/lib/pkgconfig'), ('XDG_SESSION_CLASS', 'user'), ('USERNAME', 'zyme'), ('TERM', 'xterm-256color'), ('GAZEBO_MODEL_PATH', '/home/zyme/ros_ws/astrobee/install/astrobee_iss/share:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_8_5/share:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_41_5/share:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_30/share:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_21_5/share:/home/zyme/ros_ws/astrobee/install/astrobee_granite/share:/home/zyme/ros_ws/astrobee/install/astrobee_freeflyer/share:/home/zyme/ros_ws/astrobee/install/astrobee_dock/share'), ('GNOME_DESKTOP_SESSION_ID', 'this-is-deprecated'), ('ROS_LOCALHOST_ONLY', '0'), ('WINDOWPATH', '2'), ('PATH', '/home/zyme/ros_ws/astrobee/install/perch/bin:/home/zyme/ros_ws/astrobee/install/msg_conversions/bin:/home/zyme/ros_ws/astrobee/install/camera/bin:/opt/ros/humble/bin:/home/zyme/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'), ('SESSION_MANAGER', 'local/pop-os:@/tmp/.ICE-unix/2733,unix/pop-os:/tmp/.ICE-unix/2733'), ('XDG_MENU_PREFIX', 'gnome-'), ('GNOME_TERMINAL_SCREEN', '/org/gnome/Terminal/screen/a1664d85_0611_4e17_b249_14bac02462e4'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('DISPLAY', ':1'), ('LANG', 'en_US.UTF-8'), ('XDG_CURRENT_DESKTOP', 'pop:GNOME'), ('XMODIFIERS', '@im=ibus'), ('XDG_SESSION_DESKTOP', 'pop'), ('XAUTHORITY', '/run/user/1000/gdm/Xauthority'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('GNOME_TERMINAL_SERVICE', ':1.133'), ('SSH_AGENT_LAUNCHER', 'gnome-keyring'), ('SSH_AUTH_SOCK', '/run/user/1000/keyring/ssh'), ('AMENT_PREFIX_PATH', '/home/zyme/ros_ws/astrobee/install/states:/home/zyme/ros_ws/astrobee/install/light_flow:/home/zyme/ros_ws/astrobee/install/signal_lights:/home/zyme/ros_ws/astrobee/install/fam:/home/zyme/ros_ws/astrobee/install/astrobee_gazebo:/home/zyme/ros_ws/astrobee/install/perch:/home/zyme/ros_ws/astrobee/install/framestore:/home/zyme/ros_ws/astrobee/install/dock:/home/zyme/ros_ws/astrobee/install/ctl:/home/zyme/ros_ws/astrobee/install/arm:/home/zyme/ros_ws/astrobee/install/access_control:/home/zyme/ros_ws/astrobee/install/ff_util:/home/zyme/ros_ws/astrobee/install/msg_conversions:/home/zyme/ros_ws/astrobee/install/jsonloader:/home/zyme/ros_ws/astrobee/install/ff_msgs:/home/zyme/ros_ws/astrobee/install/ff_hw_msgs:/home/zyme/ros_ws/astrobee/install/config_reader:/home/zyme/ros_ws/astrobee/install/ff_common:/home/zyme/ros_ws/astrobee/install/description:/home/zyme/ros_ws/astrobee/install/astrobee_iss:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_8_5:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_41_5:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_30:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_21_5:/home/zyme/ros_ws/astrobee/install/astrobee_granite:/home/zyme/ros_ws/astrobee/install/astrobee_freeflyer:/home/zyme/ros_ws/astrobee/install/astrobee_dock:/home/zyme/ros_ws/astrobee/install/astrobee:/opt/ros/humble'), ('SHELL', '/bin/bash'), ('QT_ACCESSIBILITY', '1'), ('GDMSESSION', 'pop'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('GPG_AGENT_INFO', '/run/user/1000/gnupg/S.gpg-agent:0:1'), ('GAZEBO_RESOURCE_PATH', '/home/zyme/ros_ws/astrobee/install/astrobee_gazebo/share/astrobee_gazebo/worlds:/home/zyme/ros_ws/astrobee/install/astrobee_iss/share:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_8_5/share:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_41_5/share:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_30/share:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_21_5/share:/home/zyme/ros_ws/astrobee/install/astrobee_granite/share:/home/zyme/ros_ws/astrobee/install/astrobee_freeflyer/share:/home/zyme/ros_ws/astrobee/install/astrobee_dock/share'), ('QT_IM_MODULE', 'ibus'), ('PWD', '/home/zyme/ros_ws/executive_teleop/executive_teleop/build/executive_teleop'), ('LC_ALL', 'en_US.UTF-8'), ('XDG_CONFIG_DIRS', '/etc/xdg/xdg-pop:/etc/xdg'), ('GAZEBO_PLUGIN_PATH', '/home/zyme/ros_ws/astrobee/install/astrobee_gazebo/lib/astrobee_gazebo'), ('XDG_DATA_DIRS', '/usr/share/pop:/usr/share/gnome:/home/zyme/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share/:/usr/share/'), ('PYTHONPATH', '/home/zyme/ros_ws/astrobee/install/ff_msgs/local/lib/python3.10/dist-packages:/home/zyme/ros_ws/astrobee/install/ff_hw_msgs/local/lib/python3.10/dist-packages:/home/zyme/ros_ws/astrobee/install/astrobee/local/lib/python3.10/dist-packages:/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('COLCON', '1'), ('VTE_VERSION', '6800'), ('CMAKE_PREFIX_PATH', '/home/zyme/ros_ws/astrobee/install/states:/home/zyme/ros_ws/astrobee/install/light_flow:/home/zyme/ros_ws/astrobee/install/signal_lights:/home/zyme/ros_ws/astrobee/install/fam:/home/zyme/ros_ws/astrobee/install/astrobee_gazebo:/opt/ros/humble:/home/zyme/ros_ws/astrobee/install/pmc:/home/zyme/ros_ws/astrobee/install/perch:/home/zyme/ros_ws/astrobee/install/framestore:/home/zyme/ros_ws/astrobee/install/dock:/home/zyme/ros_ws/astrobee/install/ctl:/home/zyme/ros_ws/astrobee/install/arm:/home/zyme/ros_ws/astrobee/install/access_control:/home/zyme/ros_ws/astrobee/install/ff_util:/home/zyme/ros_ws/astrobee/install/msg_conversions:/home/zyme/ros_ws/astrobee/install/jsonloader:/home/zyme/ros_ws/astrobee/install/ff_msgs:/home/zyme/ros_ws/astrobee/install/ff_hw_msgs:/home/zyme/ros_ws/astrobee/install/camera:/home/zyme/ros_ws/astrobee/install/config_reader:/home/zyme/ros_ws/astrobee/install/ff_common:/home/zyme/ros_ws/astrobee/install/description:/home/zyme/ros_ws/astrobee/install/astrobee_iss:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_8_5:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_41_5:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_30:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_21_5:/home/zyme/ros_ws/astrobee/install/astrobee_granite:/home/zyme/ros_ws/astrobee/install/astrobee_freeflyer:/home/zyme/ros_ws/astrobee/install/astrobee_dock:/home/zyme/ros_ws/astrobee/install/astrobee')]), 'shell': False}
[0.200468] (-) TimerEvent: {}
[0.301278] (-) TimerEvent: {}
[0.302458] (executive_teleop) StdoutLine: {'line': b'\x1b[35m\x1b[1mConsolidate compiler generated dependencies of target teleop_tool\x1b[0m\n'}
[0.364605] (executive_teleop) StdoutLine: {'line': b'[ 50%] \x1b[32mBuilding CXX object CMakeFiles/teleop_tool.dir/src/teleop_tool.cc.o\x1b[0m\n'}
[0.401645] (-) TimerEvent: {}
[0.503006] (-) TimerEvent: {}
[0.603522] (-) TimerEvent: {}
[0.703994] (-) TimerEvent: {}
[0.804558] (-) TimerEvent: {}
[0.905516] (-) TimerEvent: {}
[1.006420] (-) TimerEvent: {}
[1.107052] (-) TimerEvent: {}
[1.207923] (-) TimerEvent: {}
[1.309531] (-) TimerEvent: {}
[1.410955] (-) TimerEvent: {}
[1.511707] (-) TimerEvent: {}
[1.612128] (-) TimerEvent: {}
[1.712701] (-) TimerEvent: {}
[1.813515] (-) TimerEvent: {}
[1.915031] (-) TimerEvent: {}
[2.016422] (-) TimerEvent: {}
[2.118314] (-) TimerEvent: {}
[2.220425] (-) TimerEvent: {}
[2.322137] (-) TimerEvent: {}
[2.423273] (-) TimerEvent: {}
[2.524351] (-) TimerEvent: {}
[2.625035] (-) TimerEvent: {}
[2.725314] (-) TimerEvent: {}
[2.825728] (-) TimerEvent: {}
[2.926596] (-) TimerEvent: {}
[3.027058] (-) TimerEvent: {}
[3.127449] (-) TimerEvent: {}
[3.227822] (-) TimerEvent: {}
[3.328282] (-) TimerEvent: {}
[3.429199] (-) TimerEvent: {}
[3.533323] (-) TimerEvent: {}
[3.634141] (-) TimerEvent: {}
[3.734543] (-) TimerEvent: {}
[3.835019] (-) TimerEvent: {}
[3.935398] (-) TimerEvent: {}
[4.035792] (-) TimerEvent: {}
[4.136235] (-) TimerEvent: {}
[4.236648] (-) TimerEvent: {}
[4.336965] (-) TimerEvent: {}
[4.437287] (-) TimerEvent: {}
[4.537828] (-) TimerEvent: {}
[4.639327] (-) TimerEvent: {}
[4.740966] (-) TimerEvent: {}
[4.841844] (-) TimerEvent: {}
[4.942716] (-) TimerEvent: {}
[5.043333] (-) TimerEvent: {}
[5.144263] (-) TimerEvent: {}
[5.245255] (-) TimerEvent: {}
[5.345531] (-) TimerEvent: {}
[5.445801] (-) TimerEvent: {}
[5.546092] (-) TimerEvent: {}
[5.646803] (-) TimerEvent: {}
[5.747916] (-) TimerEvent: {}
[5.848778] (-) TimerEvent: {}
[5.950312] (-) TimerEvent: {}
[6.052866] (-) TimerEvent: {}
[6.154090] (-) TimerEvent: {}
[6.255811] (-) TimerEvent: {}
[6.357009] (-) TimerEvent: {}
[6.457848] (-) TimerEvent: {}
[6.559015] (-) TimerEvent: {}
[6.659761] (-) TimerEvent: {}
[6.760613] (-) TimerEvent: {}
[6.861188] (-) TimerEvent: {}
[6.961522] (-) TimerEvent: {}
[7.061850] (-) TimerEvent: {}
[7.162285] (-) TimerEvent: {}
[7.262799] (-) TimerEvent: {}
[7.363401] (-) TimerEvent: {}
[7.463989] (-) TimerEvent: {}
[7.564319] (-) TimerEvent: {}
[7.633188] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:\x1b[m\x1b[K In constructor \xe2\x80\x98\x1b[01m\x1b[Kexecutive_teleop::executive_teleop(int, char**)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[7.633475] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:220:109:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ff_msgs::msg::AckStamped_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99 and \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void>, ff_msgs::msg::AckStamped_<std::allocator<void> >, ff_msgs::msg::AckStamped_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99)\n'}
[7.634188] (executive_teleop) StderrLine: {'line': b'  220 |             TOPIC_MANAGEMENT_ACK, 10, std::bind(&executive_teleop::AckCallback, this, std::placeholders::_1)\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[7.634312] (executive_teleop) StderrLine: {'line': b'      |                                                                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[7.634399] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/memory:77\x1b[m\x1b[K,\n'}
[7.634488] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:21\x1b[m\x1b[K:\n'}
[7.634568] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:363:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<const std::shared_ptr<_Yp>&> std::shared_ptr<_Tp>::operator=(const std::shared_ptr<_Yp>&) [with _Yp = _Yp; _Tp = ff_msgs::msg::AckStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.634675] (executive_teleop) StderrLine: {'line': b'  363 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const shared_ptr<_Yp>& __r) noexcept\n'}
[7.634740] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.634804] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:363:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[7.634875] (executive_teleop) StderrLine: {'line': b'/usr/include/c++/11/bits/shared_ptr.h: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> template<class _Arg> using _Assignable = typename std::enable_if<std::is_assignable<std::__shared_ptr<_Tp>&, _Arg>::value, std::shared_ptr<_Tp>&>::type [with _Arg = const std::shared_ptr<rclcpp::Subscription<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void>, ff_msgs::msg::AckStamped_<std::allocator<void> >, ff_msgs::msg::AckStamped_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void> > > >&; _Tp = ff_msgs::msg::AckStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[7.635002] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:363:2:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<ff_msgs::msg::AckStamped_<std::allocator<void> > >::_Assignable<const std::shared_ptr<_Tp>&> std::shared_ptr<ff_msgs::msg::AckStamped_<std::allocator<void> > >::operator=<_Yp>(const std::shared_ptr<_Tp>&) [with _Yp = rclcpp::Subscription<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void>, ff_msgs::msg::AckStamped_<std::allocator<void> >, ff_msgs::msg::AckStamped_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.635092] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:220:109:\x1b[m\x1b[K   required from here\n'}
[7.635168] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:130:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, std::shared_ptr<ff_msgs::msg::AckStamped_<std::allocator<void> > >&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.635240] (executive_teleop) StderrLine: {'line': b'  130 |         using \x1b[01;31m\x1b[K_Assignable\x1b[m\x1b[K = typename enable_if<\n'}
[7.635309] (executive_teleop) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[7.635376] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:374:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<std::auto_ptr<_Up> > std::shared_ptr<_Tp>::operator=(std::auto_ptr<_Up>&&) [with _Yp = _Yp; _Tp = ff_msgs::msg::AckStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.635565] (executive_teleop) StderrLine: {'line': b'  374 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(auto_ptr<_Yp>&& __r)\n'}
[7.635694] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.635962] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:374:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[7.636084] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:220:109:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void>, ff_msgs::msg::AckStamped_<std::allocator<void> >, ff_msgs::msg::AckStamped_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 is not derived from \xe2\x80\x98\x1b[01m\x1b[Kstd::auto_ptr<_Up>\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.636214] (executive_teleop) StderrLine: {'line': b'  220 |             TOPIC_MANAGEMENT_ACK, 10, std::bind(&executive_teleop::AckCallback, this, std::placeholders::_1)\x1b[01;36m\x1b[K)\x1b[m\x1b[K;\n'}
[7.636345] (executive_teleop) StderrLine: {'line': b'      |                                                                                                             \x1b[01;36m\x1b[K^\x1b[m\x1b[K\n'}
[7.636490] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/memory:77\x1b[m\x1b[K,\n'}
[7.636650] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:21\x1b[m\x1b[K:\n'}
[7.636769] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:391:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<std::shared_ptr<_Yp> > std::shared_ptr<_Tp>::operator=(std::shared_ptr<_Yp>&&) [with _Yp = _Yp; _Tp = ff_msgs::msg::AckStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.636929] (executive_teleop) StderrLine: {'line': b'  391 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(shared_ptr<_Yp>&& __r) noexcept\n'}
[7.637039] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.637166] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:391:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[7.637421] (executive_teleop) StderrLine: {'line': b'/usr/include/c++/11/bits/shared_ptr.h: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> template<class _Arg> using _Assignable = typename std::enable_if<std::is_assignable<std::__shared_ptr<_Tp>&, _Arg>::value, std::shared_ptr<_Tp>&>::type [with _Arg = std::shared_ptr<rclcpp::Subscription<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void>, ff_msgs::msg::AckStamped_<std::allocator<void> >, ff_msgs::msg::AckStamped_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void> > > >; _Tp = ff_msgs::msg::AckStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[7.637604] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:391:2:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<ff_msgs::msg::AckStamped_<std::allocator<void> > >::_Assignable<std::shared_ptr<_Tp> > std::shared_ptr<ff_msgs::msg::AckStamped_<std::allocator<void> > >::operator=<_Yp>(std::shared_ptr<_Tp>&&) [with _Yp = rclcpp::Subscription<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void>, ff_msgs::msg::AckStamped_<std::allocator<void> >, ff_msgs::msg::AckStamped_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.637773] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:220:109:\x1b[m\x1b[K   required from here\n'}
[7.638080] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:130:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, std::shared_ptr<ff_msgs::msg::AckStamped_<std::allocator<void> > >&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.638194] (executive_teleop) StderrLine: {'line': b'  130 |         using \x1b[01;31m\x1b[K_Assignable\x1b[m\x1b[K = typename enable_if<\n'}
[7.638313] (executive_teleop) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[7.638498] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:399:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp, class _Del> std::shared_ptr<_Tp>::_Assignable<std::unique_ptr<_Up, _Ep> > std::shared_ptr<_Tp>::operator=(std::unique_ptr<_Up, _Ep>&&) [with _Yp = _Yp; _Del = _Del; _Tp = ff_msgs::msg::AckStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.638817] (executive_teleop) StderrLine: {'line': b'  399 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(unique_ptr<_Yp, _Del>&& __r)\n'}
[7.638991] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.639107] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:399:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[7.639266] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:220:109:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void>, ff_msgs::msg::AckStamped_<std::allocator<void> >, ff_msgs::msg::AckStamped_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 is not derived from \xe2\x80\x98\x1b[01m\x1b[Kstd::unique_ptr<_Tp, _Dp>\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.639461] (executive_teleop) StderrLine: {'line': b'  220 |             TOPIC_MANAGEMENT_ACK, 10, std::bind(&executive_teleop::AckCallback, this, std::placeholders::_1)\x1b[01;36m\x1b[K)\x1b[m\x1b[K;\n'}
[7.639748] (executive_teleop) StderrLine: {'line': b'      |                                                                                                             \x1b[01;36m\x1b[K^\x1b[m\x1b[K\n'}
[7.639883] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/memory:77\x1b[m\x1b[K,\n'}
[7.639996] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:21\x1b[m\x1b[K:\n'}
[7.640108] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:359:19:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp>& std::shared_ptr<_Tp>::operator=(const std::shared_ptr<_Tp>&) [with _Tp = ff_msgs::msg::AckStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.640252] (executive_teleop) StderrLine: {'line': b'  359 |       shared_ptr& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const shared_ptr&) noexcept = default;\n'}
[7.640395] (executive_teleop) StderrLine: {'line': b'      |                   \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.640511] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:359:29:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void>, ff_msgs::msg::AckStamped_<std::allocator<void> >, ff_msgs::msg::AckStamped_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kconst std::shared_ptr<ff_msgs::msg::AckStamped_<std::allocator<void> > >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.640695] (executive_teleop) StderrLine: {'line': b'  359 |       shared_ptr& operator=(\x1b[01;36m\x1b[Kconst shared_ptr&\x1b[m\x1b[K) noexcept = default;\n'}
[7.640826] (executive_teleop) StderrLine: {'line': b'      |                             \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[7.640942] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:383:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp>& std::shared_ptr<_Tp>::operator=(std::shared_ptr<_Tp>&&) [with _Tp = ff_msgs::msg::AckStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.641285] (executive_teleop) StderrLine: {'line': b'  383 |       \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(shared_ptr&& __r) noexcept\n'}
[7.641576] (executive_teleop) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.641747] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:383:30:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void>, ff_msgs::msg::AckStamped_<std::allocator<void> >, ff_msgs::msg::AckStamped_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ff_msgs::msg::AckStamped_<std::allocator<void> > >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.642043] (executive_teleop) StderrLine: {'line': b'  383 |       operator=(\x1b[01;36m\x1b[Kshared_ptr&& __r\x1b[m\x1b[K) noexcept\n'}
[7.642204] (executive_teleop) StderrLine: {'line': b'      |                 \x1b[01;36m\x1b[K~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[7.642351] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:224:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kclass std::shared_ptr<ff_msgs::msg::AckStamped_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99 has no member named \xe2\x80\x98\x1b[01m\x1b[KgetNumPublishers\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.642512] (executive_teleop) StderrLine: {'line': b'  224 |   while (ack_sub.\x1b[01;31m\x1b[KgetNumPublishers\x1b[m\x1b[K() == 0) {\n'}
[7.642691] (executive_teleop) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[7.664498] (-) TimerEvent: {}
[7.764903] (-) TimerEvent: {}
[7.856373] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:269:111:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99 and \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99)\n'}
[7.857951] (executive_teleop) StderrLine: {'line': b'  269 |                                    std::bind(&executive_teleop::AgentStateCallback,this,std::placeholders::_1)\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[7.858138] (executive_teleop) StderrLine: {'line': b'      |                                                                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[7.858253] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/memory:77\x1b[m\x1b[K,\n'}
[7.858358] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:21\x1b[m\x1b[K:\n'}
[7.858470] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:363:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<const std::shared_ptr<_Yp>&> std::shared_ptr<_Tp>::operator=(const std::shared_ptr<_Yp>&) [with _Yp = _Yp; _Tp = ff_msgs::msg::AgentStateStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.858647] (executive_teleop) StderrLine: {'line': b'  363 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const shared_ptr<_Yp>& __r) noexcept\n'}
[7.858814] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.858988] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:363:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[7.859160] (executive_teleop) StderrLine: {'line': b'/usr/include/c++/11/bits/shared_ptr.h: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> template<class _Arg> using _Assignable = typename std::enable_if<std::is_assignable<std::__shared_ptr<_Tp>&, _Arg>::value, std::shared_ptr<_Tp>&>::type [with _Arg = const std::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > > >&; _Tp = ff_msgs::msg::AgentStateStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[7.859374] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:363:2:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >::_Assignable<const std::shared_ptr<_Tp>&> std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >::operator=<_Yp>(const std::shared_ptr<_Tp>&) [with _Yp = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.859578] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:269:111:\x1b[m\x1b[K   required from here\n'}
[7.859672] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:130:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.859774] (executive_teleop) StderrLine: {'line': b'  130 |         using \x1b[01;31m\x1b[K_Assignable\x1b[m\x1b[K = typename enable_if<\n'}
[7.859905] (executive_teleop) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[7.859990] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:374:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<std::auto_ptr<_Up> > std::shared_ptr<_Tp>::operator=(std::auto_ptr<_Up>&&) [with _Yp = _Yp; _Tp = ff_msgs::msg::AgentStateStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.860064] (executive_teleop) StderrLine: {'line': b'  374 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(auto_ptr<_Yp>&& __r)\n'}
[7.860118] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.860172] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:374:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[7.860233] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:269:111:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 is not derived from \xe2\x80\x98\x1b[01m\x1b[Kstd::auto_ptr<_Up>\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.860301] (executive_teleop) StderrLine: {'line': b'  269 |                                    std::bind(&executive_teleop::AgentStateCallback,this,std::placeholders::_1)\x1b[01;36m\x1b[K)\x1b[m\x1b[K;\n'}
[7.860373] (executive_teleop) StderrLine: {'line': b'      |                                                                                                               \x1b[01;36m\x1b[K^\x1b[m\x1b[K\n'}
[7.860446] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/memory:77\x1b[m\x1b[K,\n'}
[7.860503] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:21\x1b[m\x1b[K:\n'}
[7.860620] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:391:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<std::shared_ptr<_Yp> > std::shared_ptr<_Tp>::operator=(std::shared_ptr<_Yp>&&) [with _Yp = _Yp; _Tp = ff_msgs::msg::AgentStateStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.860749] (executive_teleop) StderrLine: {'line': b'  391 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(shared_ptr<_Yp>&& __r) noexcept\n'}
[7.860860] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.860959] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:391:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[7.861068] (executive_teleop) StderrLine: {'line': b'/usr/include/c++/11/bits/shared_ptr.h: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> template<class _Arg> using _Assignable = typename std::enable_if<std::is_assignable<std::__shared_ptr<_Tp>&, _Arg>::value, std::shared_ptr<_Tp>&>::type [with _Arg = std::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > > >; _Tp = ff_msgs::msg::AgentStateStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[7.861188] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:391:2:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >::_Assignable<std::shared_ptr<_Tp> > std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >::operator=<_Yp>(std::shared_ptr<_Tp>&&) [with _Yp = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.861308] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:269:111:\x1b[m\x1b[K   required from here\n'}
[7.861410] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:130:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.861515] (executive_teleop) StderrLine: {'line': b'  130 |         using \x1b[01;31m\x1b[K_Assignable\x1b[m\x1b[K = typename enable_if<\n'}
[7.861632] (executive_teleop) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[7.861717] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:399:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp, class _Del> std::shared_ptr<_Tp>::_Assignable<std::unique_ptr<_Up, _Ep> > std::shared_ptr<_Tp>::operator=(std::unique_ptr<_Up, _Ep>&&) [with _Yp = _Yp; _Del = _Del; _Tp = ff_msgs::msg::AgentStateStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.861823] (executive_teleop) StderrLine: {'line': b'  399 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(unique_ptr<_Yp, _Del>&& __r)\n'}
[7.861914] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.861997] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:399:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[7.862087] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:269:111:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 is not derived from \xe2\x80\x98\x1b[01m\x1b[Kstd::unique_ptr<_Tp, _Dp>\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.862185] (executive_teleop) StderrLine: {'line': b'  269 |                                    std::bind(&executive_teleop::AgentStateCallback,this,std::placeholders::_1)\x1b[01;36m\x1b[K)\x1b[m\x1b[K;\n'}
[7.862270] (executive_teleop) StderrLine: {'line': b'      |                                                                                                               \x1b[01;36m\x1b[K^\x1b[m\x1b[K\n'}
[7.862354] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/memory:77\x1b[m\x1b[K,\n'}
[7.862437] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:21\x1b[m\x1b[K:\n'}
[7.862519] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:359:19:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp>& std::shared_ptr<_Tp>::operator=(const std::shared_ptr<_Tp>&) [with _Tp = ff_msgs::msg::AgentStateStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.862620] (executive_teleop) StderrLine: {'line': b'  359 |       shared_ptr& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const shared_ptr&) noexcept = default;\n'}
[7.862721] (executive_teleop) StderrLine: {'line': b'      |                   \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.862817] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:359:29:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kconst std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.862920] (executive_teleop) StderrLine: {'line': b'  359 |       shared_ptr& operator=(\x1b[01;36m\x1b[Kconst shared_ptr&\x1b[m\x1b[K) noexcept = default;\n'}
[7.863072] (executive_teleop) StderrLine: {'line': b'      |                             \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[7.863240] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:383:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp>& std::shared_ptr<_Tp>::operator=(std::shared_ptr<_Tp>&&) [with _Tp = ff_msgs::msg::AgentStateStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.863420] (executive_teleop) StderrLine: {'line': b'  383 |       \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(shared_ptr&& __r) noexcept\n'}
[7.863533] (executive_teleop) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.863619] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:383:30:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.863723] (executive_teleop) StderrLine: {'line': b'  383 |       operator=(\x1b[01;36m\x1b[Kshared_ptr&& __r\x1b[m\x1b[K) noexcept\n'}
[7.863815] (executive_teleop) StderrLine: {'line': b'      |                 \x1b[01;36m\x1b[K~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[7.864973] (-) TimerEvent: {}
[7.965275] (-) TimerEvent: {}
[7.966130] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:276:112:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99 and \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99)\n'}
[7.966636] (executive_teleop) StderrLine: {'line': b'  276 |                                     std::bind(&executive_teleop::FaultStateCallback,this,std::placeholders::_1)\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[7.966827] (executive_teleop) StderrLine: {'line': b'      |                                                                                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[7.966897] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/memory:77\x1b[m\x1b[K,\n'}
[7.966955] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:21\x1b[m\x1b[K:\n'}
[7.967012] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:363:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<const std::shared_ptr<_Yp>&> std::shared_ptr<_Tp>::operator=(const std::shared_ptr<_Yp>&) [with _Yp = _Yp; _Tp = ff_msgs::msg::FaultState_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.967072] (executive_teleop) StderrLine: {'line': b'  363 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const shared_ptr<_Yp>& __r) noexcept\n'}
[7.967127] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.967190] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:363:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[7.967253] (executive_teleop) StderrLine: {'line': b'/usr/include/c++/11/bits/shared_ptr.h: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> template<class _Arg> using _Assignable = typename std::enable_if<std::is_assignable<std::__shared_ptr<_Tp>&, _Arg>::value, std::shared_ptr<_Tp>&>::type [with _Arg = const std::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > > >&; _Tp = ff_msgs::msg::FaultState_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[7.967374] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:363:2:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >::_Assignable<const std::shared_ptr<_Tp>&> std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >::operator=<_Yp>(const std::shared_ptr<_Tp>&) [with _Yp = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.967490] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:276:112:\x1b[m\x1b[K   required from here\n'}
[7.967554] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:130:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.967687] (executive_teleop) StderrLine: {'line': b'  130 |         using \x1b[01;31m\x1b[K_Assignable\x1b[m\x1b[K = typename enable_if<\n'}
[7.967783] (executive_teleop) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[7.967878] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:374:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<std::auto_ptr<_Up> > std::shared_ptr<_Tp>::operator=(std::auto_ptr<_Up>&&) [with _Yp = _Yp; _Tp = ff_msgs::msg::FaultState_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.967974] (executive_teleop) StderrLine: {'line': b'  374 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(auto_ptr<_Yp>&& __r)\n'}
[7.968061] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.968148] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:374:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[7.968243] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:276:112:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 is not derived from \xe2\x80\x98\x1b[01m\x1b[Kstd::auto_ptr<_Up>\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.968595] (executive_teleop) StderrLine: {'line': b'  276 |                                     std::bind(&executive_teleop::FaultStateCallback,this,std::placeholders::_1)\x1b[01;36m\x1b[K)\x1b[m\x1b[K;\n'}
[7.968664] (executive_teleop) StderrLine: {'line': b'      |                                                                                                                \x1b[01;36m\x1b[K^\x1b[m\x1b[K\n'}
[7.968735] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/memory:77\x1b[m\x1b[K,\n'}
[7.968798] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:21\x1b[m\x1b[K:\n'}
[7.968861] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:391:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<std::shared_ptr<_Yp> > std::shared_ptr<_Tp>::operator=(std::shared_ptr<_Yp>&&) [with _Yp = _Yp; _Tp = ff_msgs::msg::FaultState_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.968935] (executive_teleop) StderrLine: {'line': b'  391 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(shared_ptr<_Yp>&& __r) noexcept\n'}
[7.969000] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.969065] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:391:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[7.969143] (executive_teleop) StderrLine: {'line': b'/usr/include/c++/11/bits/shared_ptr.h: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> template<class _Arg> using _Assignable = typename std::enable_if<std::is_assignable<std::__shared_ptr<_Tp>&, _Arg>::value, std::shared_ptr<_Tp>&>::type [with _Arg = std::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > > >; _Tp = ff_msgs::msg::FaultState_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[7.969238] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:391:2:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >::_Assignable<std::shared_ptr<_Tp> > std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >::operator=<_Yp>(std::shared_ptr<_Tp>&&) [with _Yp = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.969309] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:276:112:\x1b[m\x1b[K   required from here\n'}
[7.969379] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:130:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.969459] (executive_teleop) StderrLine: {'line': b'  130 |         using \x1b[01;31m\x1b[K_Assignable\x1b[m\x1b[K = typename enable_if<\n'}
[7.969525] (executive_teleop) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[7.969596] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:399:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp, class _Del> std::shared_ptr<_Tp>::_Assignable<std::unique_ptr<_Up, _Ep> > std::shared_ptr<_Tp>::operator=(std::unique_ptr<_Up, _Ep>&&) [with _Yp = _Yp; _Del = _Del; _Tp = ff_msgs::msg::FaultState_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.969715] (executive_teleop) StderrLine: {'line': b'  399 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(unique_ptr<_Yp, _Del>&& __r)\n'}
[7.969802] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.969890] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:399:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[7.969980] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:276:112:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 is not derived from \xe2\x80\x98\x1b[01m\x1b[Kstd::unique_ptr<_Tp, _Dp>\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.970102] (executive_teleop) StderrLine: {'line': b'  276 |                                     std::bind(&executive_teleop::FaultStateCallback,this,std::placeholders::_1)\x1b[01;36m\x1b[K)\x1b[m\x1b[K;\n'}
[7.970190] (executive_teleop) StderrLine: {'line': b'      |                                                                                                                \x1b[01;36m\x1b[K^\x1b[m\x1b[K\n'}
[7.970275] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/memory:77\x1b[m\x1b[K,\n'}
[7.970358] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:21\x1b[m\x1b[K:\n'}
[7.970445] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:359:19:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp>& std::shared_ptr<_Tp>::operator=(const std::shared_ptr<_Tp>&) [with _Tp = ff_msgs::msg::FaultState_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.970537] (executive_teleop) StderrLine: {'line': b'  359 |       shared_ptr& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const shared_ptr&) noexcept = default;\n'}
[7.970636] (executive_teleop) StderrLine: {'line': b'      |                   \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.970698] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:359:29:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kconst std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.970777] (executive_teleop) StderrLine: {'line': b'  359 |       shared_ptr& operator=(\x1b[01;36m\x1b[Kconst shared_ptr&\x1b[m\x1b[K) noexcept = default;\n'}
[7.970846] (executive_teleop) StderrLine: {'line': b'      |                             \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[7.970911] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:383:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp>& std::shared_ptr<_Tp>::operator=(std::shared_ptr<_Tp>&&) [with _Tp = ff_msgs::msg::FaultState_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.970976] (executive_teleop) StderrLine: {'line': b'  383 |       \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(shared_ptr&& __r) noexcept\n'}
[7.971037] (executive_teleop) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[7.971098] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:383:30:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[7.971190] (executive_teleop) StderrLine: {'line': b'  383 |       operator=(\x1b[01;36m\x1b[Kshared_ptr&& __r\x1b[m\x1b[K) noexcept\n'}
[7.971254] (executive_teleop) StderrLine: {'line': b'      |                 \x1b[01;36m\x1b[K~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[8.065441] (-) TimerEvent: {}
[8.078806] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:282:187:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99 and \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99)\n'}
[8.079764] (executive_teleop) StderrLine: {'line': b'  282 | gs::action::Motion_FeedbackMessage::SharedPtr>(topic_name, 10, std::bind(&executive_teleop::MoveFeedbackCallback,this,std::placeholders::_1)\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[8.080171] (executive_teleop) StderrLine: {'line': b'      |                                                                                                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[8.080459] (executive_teleop) StderrLine: {'line': b'\n'}
[8.080605] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/memory:77\x1b[m\x1b[K,\n'}
[8.080711] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:21\x1b[m\x1b[K:\n'}
[8.080810] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:363:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<const std::shared_ptr<_Yp>&> std::shared_ptr<_Tp>::operator=(const std::shared_ptr<_Yp>&) [with _Yp = _Yp; _Tp = ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.080937] (executive_teleop) StderrLine: {'line': b'  363 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const shared_ptr<_Yp>& __r) noexcept\n'}
[8.081031] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[8.081122] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:363:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[8.081219] (executive_teleop) StderrLine: {'line': b'/usr/include/c++/11/bits/shared_ptr.h: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> template<class _Arg> using _Assignable = typename std::enable_if<std::is_assignable<std::__shared_ptr<_Tp>&, _Arg>::value, std::shared_ptr<_Tp>&>::type [with _Arg = const std::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > > >&; _Tp = ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[8.081346] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:363:2:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >::_Assignable<const std::shared_ptr<_Tp>&> std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >::operator=<_Yp>(const std::shared_ptr<_Tp>&) [with _Yp = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.081454] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:282:187:\x1b[m\x1b[K   required from here\n'}
[8.081569] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:130:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.081666] (executive_teleop) StderrLine: {'line': b'  130 |         using \x1b[01;31m\x1b[K_Assignable\x1b[m\x1b[K = typename enable_if<\n'}
[8.081757] (executive_teleop) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[8.081845] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:374:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<std::auto_ptr<_Up> > std::shared_ptr<_Tp>::operator=(std::auto_ptr<_Up>&&) [with _Yp = _Yp; _Tp = ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.081941] (executive_teleop) StderrLine: {'line': b'  374 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(auto_ptr<_Yp>&& __r)\n'}
[8.082043] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[8.082143] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:374:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[8.082234] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:282:187:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 is not derived from \xe2\x80\x98\x1b[01m\x1b[Kstd::auto_ptr<_Up>\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.082358] (executive_teleop) StderrLine: {'line': b'  282 | gs::action::Motion_FeedbackMessage::SharedPtr>(topic_name, 10, std::bind(&executive_teleop::MoveFeedbackCallback,this,std::placeholders::_1)\x1b[01;36m\x1b[K)\x1b[m\x1b[K;\n'}
[8.082451] (executive_teleop) StderrLine: {'line': b'      |                                                                                                                                             \x1b[01;36m\x1b[K^\x1b[m\x1b[K\n'}
[8.082622] (executive_teleop) StderrLine: {'line': b'\n'}
[8.082840] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/memory:77\x1b[m\x1b[K,\n'}
[8.083065] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:21\x1b[m\x1b[K:\n'}
[8.083275] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:391:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<std::shared_ptr<_Yp> > std::shared_ptr<_Tp>::operator=(std::shared_ptr<_Yp>&&) [with _Yp = _Yp; _Tp = ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.083628] (executive_teleop) StderrLine: {'line': b'  391 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(shared_ptr<_Yp>&& __r) noexcept\n'}
[8.083861] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[8.084083] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:391:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[8.084279] (executive_teleop) StderrLine: {'line': b'/usr/include/c++/11/bits/shared_ptr.h: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> template<class _Arg> using _Assignable = typename std::enable_if<std::is_assignable<std::__shared_ptr<_Tp>&, _Arg>::value, std::shared_ptr<_Tp>&>::type [with _Arg = std::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > > >; _Tp = ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[8.084588] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:391:2:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >::_Assignable<std::shared_ptr<_Tp> > std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >::operator=<_Yp>(std::shared_ptr<_Tp>&&) [with _Yp = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.085217] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:282:187:\x1b[m\x1b[K   required from here\n'}
[8.086038] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:130:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.086371] (executive_teleop) StderrLine: {'line': b'  130 |         using \x1b[01;31m\x1b[K_Assignable\x1b[m\x1b[K = typename enable_if<\n'}
[8.086524] (executive_teleop) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[8.086642] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:399:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp, class _Del> std::shared_ptr<_Tp>::_Assignable<std::unique_ptr<_Up, _Ep> > std::shared_ptr<_Tp>::operator=(std::unique_ptr<_Up, _Ep>&&) [with _Yp = _Yp; _Del = _Del; _Tp = ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.086804] (executive_teleop) StderrLine: {'line': b'  399 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(unique_ptr<_Yp, _Del>&& __r)\n'}
[8.086937] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[8.087044] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:399:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[8.087192] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:282:187:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 is not derived from \xe2\x80\x98\x1b[01m\x1b[Kstd::unique_ptr<_Tp, _Dp>\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.087365] (executive_teleop) StderrLine: {'line': b'  282 | gs::action::Motion_FeedbackMessage::SharedPtr>(topic_name, 10, std::bind(&executive_teleop::MoveFeedbackCallback,this,std::placeholders::_1)\x1b[01;36m\x1b[K)\x1b[m\x1b[K;\n'}
[8.087654] (executive_teleop) StderrLine: {'line': b'      |                                                                                                                                             \x1b[01;36m\x1b[K^\x1b[m\x1b[K\n'}
[8.087864] (executive_teleop) StderrLine: {'line': b'\n'}
[8.088077] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/memory:77\x1b[m\x1b[K,\n'}
[8.088275] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:21\x1b[m\x1b[K:\n'}
[8.088539] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:359:19:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp>& std::shared_ptr<_Tp>::operator=(const std::shared_ptr<_Tp>&) [with _Tp = ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.088772] (executive_teleop) StderrLine: {'line': b'  359 |       shared_ptr& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const shared_ptr&) noexcept = default;\n'}
[8.088938] (executive_teleop) StderrLine: {'line': b'      |                   \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[8.089077] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:359:29:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kconst std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.089216] (executive_teleop) StderrLine: {'line': b'  359 |       shared_ptr& operator=(\x1b[01;36m\x1b[Kconst shared_ptr&\x1b[m\x1b[K) noexcept = default;\n'}
[8.089348] (executive_teleop) StderrLine: {'line': b'      |                             \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[8.089494] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:383:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp>& std::shared_ptr<_Tp>::operator=(std::shared_ptr<_Tp>&&) [with _Tp = ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.089606] (executive_teleop) StderrLine: {'line': b'  383 |       \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(shared_ptr&& __r) noexcept\n'}
[8.089691] (executive_teleop) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[8.089789] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:383:30:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.089898] (executive_teleop) StderrLine: {'line': b'  383 |       operator=(\x1b[01;36m\x1b[Kshared_ptr&& __r\x1b[m\x1b[K) noexcept\n'}
[8.089990] (executive_teleop) StderrLine: {'line': b'      |                 \x1b[01;36m\x1b[K~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[8.090091] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:288:137:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KDockFeedbbackCallback\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kexecutive_teleop\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.090211] (executive_teleop) StderrLine: {'line': b'  288 | ock_sub = this->create_subscription<ff_msgs::action::Dock_FeedbackMessage::SharedPtr>(topic_name, 10, std::bind(&executive_teleop::\x1b[01;31m\x1b[KDockFeedbbackCallback\x1b[m\x1b[K,this,std::placeholders::_1));\n'}
[8.090343] (executive_teleop) StderrLine: {'line': b'      |                                                                                                                                    \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[8.090437] (executive_teleop) StderrLine: {'line': b'\n'}
[8.090522] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:291:21:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kclass std::shared_ptr<ff_msgs::action::Dock_FeedbackMessage_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99 has no member named \xe2\x80\x98\x1b[01m\x1b[KgetNumPublishers\x1b[m\x1b[K\xe2\x80\x99\n'}
[8.090644] (executive_teleop) StderrLine: {'line': b'  291 |     while (dock_sub.\x1b[01;31m\x1b[KgetNumPublishers\x1b[m\x1b[K() == 0) {\n'}
[8.090725] (executive_teleop) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[8.090806] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kbool executive_teleop::Finished()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[8.090886] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:324:1:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kno return statement in function returning non-void [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wreturn-type\x07-Wreturn-type\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[8.090965] (executive_teleop) StderrLine: {'line': b'  324 | \x1b[01;35m\x1b[K}\x1b[m\x1b[K\n'}
[8.091043] (executive_teleop) StderrLine: {'line': b'      | \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[8.146031] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kbool executive_teleop::SendMobilityCommand()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[8.146354] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:599:1:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kno return statement in function returning non-void [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wreturn-type\x07-Wreturn-type\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[8.146568] (executive_teleop) StderrLine: {'line': b'  599 | \x1b[01;35m\x1b[K}\x1b[m\x1b[K\n'}
[8.146651] (executive_teleop) StderrLine: {'line': b'      | \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[8.148170] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kbool executive_teleop::SendResetBias()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[8.148653] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:614:1:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kno return statement in function returning non-void [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wreturn-type\x07-Wreturn-type\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[8.148845] (executive_teleop) StderrLine: {'line': b'  614 | \x1b[01;35m\x1b[K}\x1b[m\x1b[K\n'}
[8.149027] (executive_teleop) StderrLine: {'line': b'      | \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[8.149384] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kbool executive_teleop::SendResetEkf()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[8.149862] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:629:1:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kno return statement in function returning non-void [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wreturn-type\x07-Wreturn-type\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[8.150623] (executive_teleop) StderrLine: {'line': b'  629 | \x1b[01;35m\x1b[K}\x1b[m\x1b[K\n'}
[8.151069] (executive_teleop) StderrLine: {'line': b'      | \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[8.155081] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kbool executive_teleop::SendSetCheckZones()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[8.156070] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:653:1:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kno return statement in function returning non-void [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wreturn-type\x07-Wreturn-type\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[8.156287] (executive_teleop) StderrLine: {'line': b'  653 | \x1b[01;35m\x1b[K}\x1b[m\x1b[K\n'}
[8.156441] (executive_teleop) StderrLine: {'line': b'      | \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[8.158005] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kbool executive_teleop::SendSetFaceForward()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[8.158267] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:682:1:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kno return statement in function returning non-void [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wreturn-type\x07-Wreturn-type\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[8.158396] (executive_teleop) StderrLine: {'line': b'  682 | \x1b[01;35m\x1b[K}\x1b[m\x1b[K\n'}
[8.158493] (executive_teleop) StderrLine: {'line': b'      | \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[8.159435] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kbool executive_teleop::SendSetOpLimits()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[8.159631] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:732:1:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kno return statement in function returning non-void [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wreturn-type\x07-Wreturn-type\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[8.159730] (executive_teleop) StderrLine: {'line': b'  732 | \x1b[01;35m\x1b[K}\x1b[m\x1b[K\n'}
[8.159830] (executive_teleop) StderrLine: {'line': b'      | \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[8.160358] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kbool executive_teleop::SendSetPlanner()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[8.160477] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:752:1:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kno return statement in function returning non-void [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wreturn-type\x07-Wreturn-type\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[8.160563] (executive_teleop) StderrLine: {'line': b'  752 | \x1b[01;35m\x1b[K}\x1b[m\x1b[K\n'}
[8.160662] (executive_teleop) StderrLine: {'line': b'      | \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[8.165600] (-) TimerEvent: {}
[8.266029] (-) TimerEvent: {}
[8.366498] (-) TimerEvent: {}
[8.467042] (-) TimerEvent: {}
[8.567493] (-) TimerEvent: {}
[8.668022] (-) TimerEvent: {}
[8.768587] (-) TimerEvent: {}
[8.869243] (-) TimerEvent: {}
[8.970274] (-) TimerEvent: {}
[9.070907] (-) TimerEvent: {}
[9.172251] (-) TimerEvent: {}
[9.273350] (-) TimerEvent: {}
[9.374222] (-) TimerEvent: {}
[9.475120] (-) TimerEvent: {}
[9.575937] (-) TimerEvent: {}
[9.676365] (-) TimerEvent: {}
[9.777034] (-) TimerEvent: {}
[9.878143] (-) TimerEvent: {}
[9.978663] (-) TimerEvent: {}
[10.079151] (-) TimerEvent: {}
[10.179632] (-) TimerEvent: {}
[10.280124] (-) TimerEvent: {}
[10.380498] (-) TimerEvent: {}
[10.480895] (-) TimerEvent: {}
[10.581410] (-) TimerEvent: {}
[10.682209] (-) TimerEvent: {}
[10.686589] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[10.686772] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[10.686838] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[10.686894] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[10.686948] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[10.687003] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[10.687279] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[10.687481] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[10.687566] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[10.687680] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[10.687845] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:29\x1b[m\x1b[K:\n'}
[10.687941] (executive_teleop) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[10.688008] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> >; ROSMessageType = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.688101] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.688193] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.688263] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.688343] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:267:92:\x1b[m\x1b[K   required from here\n'}
[10.688404] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::AnySubscriptionCallbackHelper<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, false>::variant_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >\x1b[m\x1b[K\xe2\x80\x99} and \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>\x1b[m\x1b[K\xe2\x80\x99})\n'}
[10.688551] (executive_teleop) StderrLine: {'line': b'  394 |       \x1b[01;31m\x1b[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)\x1b[m\x1b[K;\n'}
[10.688619] (executive_teleop) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[10.688706] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:28\x1b[m\x1b[K,\n'}
[10.688793] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24\x1b[m\x1b[K,\n'}
[10.688880] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[10.688965] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[10.689050] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[10.689105] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[10.689181] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[10.689264] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[10.689351] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[10.689436] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[10.689593] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:29\x1b[m\x1b[K:\n'}
[10.689756] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.690006] (executive_teleop) StderrLine: {'line': b' 1461 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(_Tp&& __rhs)\n'}
[10.690150] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[10.690299] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[10.690457] (executive_teleop) StderrLine: {'line': b'/usr/include/c++/11/variant: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>&&; <template-parameter-2-2> = void; _Types = {std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[10.690631] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1457:14:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.690897] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.691008] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> >; ROSMessageType = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.691129] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.691233] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.691347] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.691527] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:267:92:\x1b[m\x1b[K   required from here\n'}
[10.691669] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1375:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.691815] (executive_teleop) StderrLine: {'line': b' 1375 |         using \x1b[01;31m\x1b[K__accepted_type\x1b[m\x1b[K = __to_type<__accepted_index<_Tp>>;\n'}
[10.691897] (executive_teleop) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[10.692017] (executive_teleop) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[10.692163] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> >; ROSMessageType = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.692330] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.692475] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.692609] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.692727] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:267:92:\x1b[m\x1b[K   required from here\n'}
[10.692817] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.692958] (executive_teleop) StderrLine: {'line': b' 1398 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const variant&) = default;\n'}
[10.693057] (executive_teleop) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[10.693161] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst std::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.693287] (executive_teleop) StderrLine: {'line': b' 1398 |       variant& operator=(\x1b[01;36m\x1b[Kconst variant&\x1b[m\x1b[K) = default;\n'}
[10.693383] (executive_teleop) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[10.693476] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.693650] (executive_teleop) StderrLine: {'line': b' 1399 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(variant&&) = default;\n'}
[10.693775] (executive_teleop) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[10.693898] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.694082] (executive_teleop) StderrLine: {'line': b' 1399 |       variant& operator=(\x1b[01;36m\x1b[Kvariant&&\x1b[m\x1b[K) = default;\n'}
[10.694205] (executive_teleop) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[10.724975] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[10.725175] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[10.725325] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[10.725420] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[10.725667] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[10.725927] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[10.726204] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[10.726400] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[10.726543] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[10.726708] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[10.726877] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:29\x1b[m\x1b[K:\n'}
[10.727046] (executive_teleop) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[10.727234] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> >; ROSMessageType = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.727484] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.727669] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.727789] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.727917] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:274:85:\x1b[m\x1b[K   required from here\n'}
[10.728016] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::AnySubscriptionCallbackHelper<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, false>::variant_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >\x1b[m\x1b[K\xe2\x80\x99} and \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>\x1b[m\x1b[K\xe2\x80\x99})\n'}
[10.728188] (executive_teleop) StderrLine: {'line': b'  394 |       \x1b[01;31m\x1b[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)\x1b[m\x1b[K;\n'}
[10.728294] (executive_teleop) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[10.728389] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:28\x1b[m\x1b[K,\n'}
[10.728482] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24\x1b[m\x1b[K,\n'}
[10.728595] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[10.728690] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[10.728793] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[10.728898] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[10.729005] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[10.729133] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[10.729252] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[10.729361] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[10.729466] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:29\x1b[m\x1b[K:\n'}
[10.729587] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.729743] (executive_teleop) StderrLine: {'line': b' 1461 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(_Tp&& __rhs)\n'}
[10.729840] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[10.729942] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[10.730046] (executive_teleop) StderrLine: {'line': b'/usr/include/c++/11/variant: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>&&; <template-parameter-2-2> = void; _Types = {std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[10.730201] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1457:14:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.730505] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.730645] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> >; ROSMessageType = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.730806] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.730951] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.731088] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.731242] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:274:85:\x1b[m\x1b[K   required from here\n'}
[10.731353] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1375:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.731489] (executive_teleop) StderrLine: {'line': b' 1375 |         using \x1b[01;31m\x1b[K__accepted_type\x1b[m\x1b[K = __to_type<__accepted_index<_Tp>>;\n'}
[10.731615] (executive_teleop) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[10.731712] (executive_teleop) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[10.731820] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> >; ROSMessageType = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.731943] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.732318] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.732450] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.732620] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:274:85:\x1b[m\x1b[K   required from here\n'}
[10.732749] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.732920] (executive_teleop) StderrLine: {'line': b' 1398 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const variant&) = default;\n'}
[10.733045] (executive_teleop) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[10.733173] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst std::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.733365] (executive_teleop) StderrLine: {'line': b' 1398 |       variant& operator=(\x1b[01;36m\x1b[Kconst variant&\x1b[m\x1b[K) = default;\n'}
[10.733491] (executive_teleop) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[10.733602] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.733736] (executive_teleop) StderrLine: {'line': b' 1399 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(variant&&) = default;\n'}
[10.733833] (executive_teleop) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[10.733928] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.734076] (executive_teleop) StderrLine: {'line': b' 1399 |       variant& operator=(\x1b[01;36m\x1b[Kvariant&&\x1b[m\x1b[K) = default;\n'}
[10.734176] (executive_teleop) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[10.764050] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[10.764413] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[10.764521] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[10.764613] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[10.764716] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[10.764880] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[10.765061] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[10.765178] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[10.765373] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[10.765462] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[10.765575] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:29\x1b[m\x1b[K:\n'}
[10.765671] (executive_teleop) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[10.765782] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> >; ROSMessageType = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.765901] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.766014] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.766133] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.766242] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:282:93:\x1b[m\x1b[K   required from here\n'}
[10.766339] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::AnySubscriptionCallbackHelper<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, false>::variant_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >\x1b[m\x1b[K\xe2\x80\x99} and \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>\x1b[m\x1b[K\xe2\x80\x99})\n'}
[10.766479] (executive_teleop) StderrLine: {'line': b'  394 |       \x1b[01;31m\x1b[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)\x1b[m\x1b[K;\n'}
[10.766566] (executive_teleop) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[10.766634] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:28\x1b[m\x1b[K,\n'}
[10.766694] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24\x1b[m\x1b[K,\n'}
[10.766753] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[10.766812] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[10.766871] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[10.766930] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[10.766992] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[10.767051] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[10.767110] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[10.767169] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[10.767227] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:29\x1b[m\x1b[K:\n'}
[10.767285] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.767393] (executive_teleop) StderrLine: {'line': b' 1461 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(_Tp&& __rhs)\n'}
[10.767468] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[10.767547] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[10.767605] (executive_teleop) StderrLine: {'line': b'/usr/include/c++/11/variant: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>&&; <template-parameter-2-2> = void; _Types = {std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[10.767698] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1457:14:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.767919] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.767989] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> >; ROSMessageType = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.768073] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.768150] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.768227] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.768302] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:282:93:\x1b[m\x1b[K   required from here\n'}
[10.768364] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1375:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.768425] (executive_teleop) StderrLine: {'line': b' 1375 |         using \x1b[01;31m\x1b[K__accepted_type\x1b[m\x1b[K = __to_type<__accepted_index<_Tp>>;\n'}
[10.768507] (executive_teleop) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[10.768574] (executive_teleop) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[10.768652] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> >; ROSMessageType = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.768737] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.768827] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.768917] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.769005] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:282:93:\x1b[m\x1b[K   required from here\n'}
[10.769073] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.769175] (executive_teleop) StderrLine: {'line': b' 1398 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const variant&) = default;\n'}
[10.769244] (executive_teleop) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[10.769311] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst std::variant<std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.769417] (executive_teleop) StderrLine: {'line': b' 1398 |       variant& operator=(\x1b[01;36m\x1b[Kconst variant&\x1b[m\x1b[K) = default;\n'}
[10.769488] (executive_teleop) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[10.769574] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.769682] (executive_teleop) StderrLine: {'line': b' 1399 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(variant&&) = default;\n'}
[10.769740] (executive_teleop) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[10.769800] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[10.769989] (executive_teleop) StderrLine: {'line': b' 1399 |       variant& operator=(\x1b[01;36m\x1b[Kvariant&&\x1b[m\x1b[K) = default;\n'}
[10.770051] (executive_teleop) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[10.782424] (-) TimerEvent: {}
[10.883440] (-) TimerEvent: {}
[10.984393] (-) TimerEvent: {}
[11.084904] (-) TimerEvent: {}
[11.185257] (-) TimerEvent: {}
[11.285616] (-) TimerEvent: {}
[11.386090] (-) TimerEvent: {}
[11.486339] (-) TimerEvent: {}
[11.586629] (-) TimerEvent: {}
[11.686938] (-) TimerEvent: {}
[11.787250] (-) TimerEvent: {}
[11.887567] (-) TimerEvent: {}
[11.987836] (-) TimerEvent: {}
[12.088147] (-) TimerEvent: {}
[12.188410] (-) TimerEvent: {}
[12.288739] (-) TimerEvent: {}
[12.389074] (-) TimerEvent: {}
[12.489366] (-) TimerEvent: {}
[12.589636] (-) TimerEvent: {}
[12.689929] (-) TimerEvent: {}
[12.790224] (-) TimerEvent: {}
[12.890502] (-) TimerEvent: {}
[12.990770] (-) TimerEvent: {}
[13.091020] (-) TimerEvent: {}
[13.191291] (-) TimerEvent: {}
[13.291603] (-) TimerEvent: {}
[13.391971] (-) TimerEvent: {}
[13.492334] (-) TimerEvent: {}
[13.592701] (-) TimerEvent: {}
[13.693035] (-) TimerEvent: {}
[13.793335] (-) TimerEvent: {}
[13.893613] (-) TimerEvent: {}
[13.993925] (-) TimerEvent: {}
[14.094218] (-) TimerEvent: {}
[14.194495] (-) TimerEvent: {}
[14.294796] (-) TimerEvent: {}
[14.395142] (-) TimerEvent: {}
[14.495440] (-) TimerEvent: {}
[14.595708] (-) TimerEvent: {}
[14.695995] (-) TimerEvent: {}
[14.796277] (-) TimerEvent: {}
[14.896558] (-) TimerEvent: {}
[14.996801] (-) TimerEvent: {}
[15.097102] (-) TimerEvent: {}
[15.197395] (-) TimerEvent: {}
[15.297708] (-) TimerEvent: {}
[15.398053] (-) TimerEvent: {}
[15.498338] (-) TimerEvent: {}
[15.598591] (-) TimerEvent: {}
[15.682808] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kbool executive_teleop::SendNextCommand()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[15.683241] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:789:1:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kcontrol reaches end of non-void function [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wreturn-type\x07-Wreturn-type\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[15.683360] (executive_teleop) StderrLine: {'line': b'  789 | \x1b[01;35m\x1b[K}\x1b[m\x1b[K\n'}
[15.683489] (executive_teleop) StderrLine: {'line': b'      | \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[15.698704] (-) TimerEvent: {}
[15.799159] (-) TimerEvent: {}
[15.899749] (-) TimerEvent: {}
[16.000633] (-) TimerEvent: {}
[16.060534] (executive_teleop) StderrLine: {'line': b'gmake[2]: *** [CMakeFiles/teleop_tool.dir/build.make:76: CMakeFiles/teleop_tool.dir/src/teleop_tool.cc.o] Error 1\n'}
[16.060831] (executive_teleop) StderrLine: {'line': b'gmake[1]: *** [CMakeFiles/Makefile2:137: CMakeFiles/teleop_tool.dir/all] Error 2\n'}
[16.061056] (executive_teleop) StderrLine: {'line': b'gmake: *** [Makefile:146: all] Error 2\n'}
[16.063973] (executive_teleop) CommandEnded: {'returncode': 2}
[16.100996] (-) TimerEvent: {}
[16.202289] (-) TimerEvent: {}
[16.230519] (executive_teleop) JobEnded: {'identifier': 'executive_teleop', 'rc': 2}
[16.274223] (-) EventReactorShutdown: {}
