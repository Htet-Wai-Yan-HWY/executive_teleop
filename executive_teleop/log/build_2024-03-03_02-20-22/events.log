[0.000000] (-) TimerEvent: {}
[0.000116] (executive_teleop) JobQueued: {'identifier': 'executive_teleop', 'dependencies': OrderedDict()}
[0.000586] (executive_teleop) JobStarted: {'identifier': 'executive_teleop'}
[0.100145] (-) TimerEvent: {}
[0.120121] (executive_teleop) JobProgress: {'identifier': 'executive_teleop', 'progress': 'cmake'}
[0.120758] (executive_teleop) JobProgress: {'identifier': 'executive_teleop', 'progress': 'build'}
[0.121670] (executive_teleop) Command: {'cmd': ['/usr/bin/cmake', '--build', '/home/zyme/ros_ws/executive_teleop/executive_teleop/build/executive_teleop', '--', '-j12', '-l12'], 'cwd': '/home/zyme/ros_ws/executive_teleop/executive_teleop/build/executive_teleop', 'env': OrderedDict([('LESSOPEN', '| /usr/bin/lesspipe %s'), ('USER', 'zyme'), ('ROS_PACKAGE_PATH', '/home/zyme/ros_ws/astrobee/install/pmc/share:/home/zyme/ros_ws/astrobee/install/camera/share'), ('XDG_SESSION_TYPE', 'x11'), ('SHLVL', '1'), ('LD_LIBRARY_PATH', '/home/zyme/ros_ws/astrobee/install/states/lib:/home/zyme/ros_ws/astrobee/install/light_flow/lib:/home/zyme/ros_ws/astrobee/install/fam/lib:/home/zyme/ros_ws/astrobee/install/astrobee_gazebo/lib:/home/zyme/ros_ws/astrobee/install/perch/lib:/home/zyme/ros_ws/astrobee/install/framestore/lib:/home/zyme/ros_ws/astrobee/install/dock/lib:/home/zyme/ros_ws/astrobee/install/ctl/lib:/home/zyme/ros_ws/astrobee/install/arm/lib:/home/zyme/ros_ws/astrobee/install/access_control/lib:/home/zyme/ros_ws/astrobee/install/ff_util/lib:/home/zyme/ros_ws/astrobee/install/msg_conversions/lib:/home/zyme/ros_ws/astrobee/install/jsonloader/lib:/home/zyme/ros_ws/astrobee/install/ff_msgs/lib:/home/zyme/ros_ws/astrobee/install/ff_hw_msgs/lib:/home/zyme/ros_ws/astrobee/install/config_reader/lib:/home/zyme/ros_ws/astrobee/install/ff_common/lib:/usr/lib/x86_64-linux-gnu/gazebo-11/plugins:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib'), ('HOME', '/home/zyme'), ('OLDPWD', '/home/zyme/ros_ws/executive_teleop'), ('DESKTOP_SESSION', 'pop'), ('ROS_PYTHON_VERSION', '3'), ('GNOME_SHELL_SESSION_MODE', 'pop'), ('GTK_MODULES', 'gail:atk-bridge'), ('SYSTEMD_EXEC_PID', '2755'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('COLORTERM', 'truecolor'), ('QT_QPA_PLATFORMTHEME', 'qt5ct'), ('COLCON_PREFIX_PATH', '/home/zyme/ros_ws/executive_teleop/executive_teleop/install:/home/zyme/ros_ws/astrobee/install'), ('ROS_DISTRO', 'humble'), ('GTK_IM_MODULE', 'ibus'), ('LOGNAME', 'zyme'), ('_', '/usr/bin/colcon'), ('ROS_VERSION', '2'), ('PKG_CONFIG_PATH', '/home/zyme/ros_ws/astrobee/install/pmc/lib/x86_64-linux-gnu/pkgconfig:/home/zyme/ros_ws/astrobee/install/pmc/lib/pkgconfig:/home/zyme/ros_ws/astrobee/install/camera/lib/x86_64-linux-gnu/pkgconfig:/home/zyme/ros_ws/astrobee/install/camera/lib/pkgconfig'), ('XDG_SESSION_CLASS', 'user'), ('USERNAME', 'zyme'), ('TERM', 'xterm-256color'), ('GAZEBO_MODEL_PATH', '/home/zyme/ros_ws/astrobee/install/astrobee_iss/share:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_8_5/share:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_41_5/share:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_30/share:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_21_5/share:/home/zyme/ros_ws/astrobee/install/astrobee_granite/share:/home/zyme/ros_ws/astrobee/install/astrobee_freeflyer/share:/home/zyme/ros_ws/astrobee/install/astrobee_dock/share'), ('GNOME_DESKTOP_SESSION_ID', 'this-is-deprecated'), ('ROS_LOCALHOST_ONLY', '0'), ('WINDOWPATH', '2'), ('PATH', '/home/zyme/ros_ws/astrobee/install/perch/bin:/home/zyme/ros_ws/astrobee/install/msg_conversions/bin:/home/zyme/ros_ws/astrobee/install/camera/bin:/opt/ros/humble/bin:/home/zyme/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'), ('SESSION_MANAGER', 'local/pop-os:@/tmp/.ICE-unix/2733,unix/pop-os:/tmp/.ICE-unix/2733'), ('XDG_MENU_PREFIX', 'gnome-'), ('GNOME_TERMINAL_SCREEN', '/org/gnome/Terminal/screen/a1664d85_0611_4e17_b249_14bac02462e4'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('DISPLAY', ':1'), ('LANG', 'en_US.UTF-8'), ('XDG_CURRENT_DESKTOP', 'pop:GNOME'), ('XMODIFIERS', '@im=ibus'), ('XDG_SESSION_DESKTOP', 'pop'), ('XAUTHORITY', '/run/user/1000/gdm/Xauthority'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('GNOME_TERMINAL_SERVICE', ':1.133'), ('SSH_AGENT_LAUNCHER', 'gnome-keyring'), ('SSH_AUTH_SOCK', '/run/user/1000/keyring/ssh'), ('AMENT_PREFIX_PATH', '/home/zyme/ros_ws/astrobee/install/states:/home/zyme/ros_ws/astrobee/install/light_flow:/home/zyme/ros_ws/astrobee/install/signal_lights:/home/zyme/ros_ws/astrobee/install/fam:/home/zyme/ros_ws/astrobee/install/astrobee_gazebo:/home/zyme/ros_ws/astrobee/install/perch:/home/zyme/ros_ws/astrobee/install/framestore:/home/zyme/ros_ws/astrobee/install/dock:/home/zyme/ros_ws/astrobee/install/ctl:/home/zyme/ros_ws/astrobee/install/arm:/home/zyme/ros_ws/astrobee/install/access_control:/home/zyme/ros_ws/astrobee/install/ff_util:/home/zyme/ros_ws/astrobee/install/msg_conversions:/home/zyme/ros_ws/astrobee/install/jsonloader:/home/zyme/ros_ws/astrobee/install/ff_msgs:/home/zyme/ros_ws/astrobee/install/ff_hw_msgs:/home/zyme/ros_ws/astrobee/install/config_reader:/home/zyme/ros_ws/astrobee/install/ff_common:/home/zyme/ros_ws/astrobee/install/description:/home/zyme/ros_ws/astrobee/install/astrobee_iss:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_8_5:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_41_5:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_30:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_21_5:/home/zyme/ros_ws/astrobee/install/astrobee_granite:/home/zyme/ros_ws/astrobee/install/astrobee_freeflyer:/home/zyme/ros_ws/astrobee/install/astrobee_dock:/home/zyme/ros_ws/astrobee/install/astrobee:/opt/ros/humble'), ('SHELL', '/bin/bash'), ('QT_ACCESSIBILITY', '1'), ('GDMSESSION', 'pop'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('GPG_AGENT_INFO', '/run/user/1000/gnupg/S.gpg-agent:0:1'), ('GAZEBO_RESOURCE_PATH', '/home/zyme/ros_ws/astrobee/install/astrobee_gazebo/share/astrobee_gazebo/worlds:/home/zyme/ros_ws/astrobee/install/astrobee_iss/share:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_8_5/share:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_41_5/share:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_30/share:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_21_5/share:/home/zyme/ros_ws/astrobee/install/astrobee_granite/share:/home/zyme/ros_ws/astrobee/install/astrobee_freeflyer/share:/home/zyme/ros_ws/astrobee/install/astrobee_dock/share'), ('QT_IM_MODULE', 'ibus'), ('PWD', '/home/zyme/ros_ws/executive_teleop/executive_teleop/build/executive_teleop'), ('LC_ALL', 'en_US.UTF-8'), ('XDG_CONFIG_DIRS', '/etc/xdg/xdg-pop:/etc/xdg'), ('GAZEBO_PLUGIN_PATH', '/home/zyme/ros_ws/astrobee/install/astrobee_gazebo/lib/astrobee_gazebo'), ('XDG_DATA_DIRS', '/usr/share/pop:/usr/share/gnome:/home/zyme/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share/:/usr/share/'), ('PYTHONPATH', '/home/zyme/ros_ws/astrobee/install/ff_msgs/local/lib/python3.10/dist-packages:/home/zyme/ros_ws/astrobee/install/ff_hw_msgs/local/lib/python3.10/dist-packages:/home/zyme/ros_ws/astrobee/install/astrobee/local/lib/python3.10/dist-packages:/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('COLCON', '1'), ('VTE_VERSION', '6800'), ('CMAKE_PREFIX_PATH', '/home/zyme/ros_ws/astrobee/install/states:/home/zyme/ros_ws/astrobee/install/light_flow:/home/zyme/ros_ws/astrobee/install/signal_lights:/home/zyme/ros_ws/astrobee/install/fam:/home/zyme/ros_ws/astrobee/install/astrobee_gazebo:/opt/ros/humble:/home/zyme/ros_ws/astrobee/install/pmc:/home/zyme/ros_ws/astrobee/install/perch:/home/zyme/ros_ws/astrobee/install/framestore:/home/zyme/ros_ws/astrobee/install/dock:/home/zyme/ros_ws/astrobee/install/ctl:/home/zyme/ros_ws/astrobee/install/arm:/home/zyme/ros_ws/astrobee/install/access_control:/home/zyme/ros_ws/astrobee/install/ff_util:/home/zyme/ros_ws/astrobee/install/msg_conversions:/home/zyme/ros_ws/astrobee/install/jsonloader:/home/zyme/ros_ws/astrobee/install/ff_msgs:/home/zyme/ros_ws/astrobee/install/ff_hw_msgs:/home/zyme/ros_ws/astrobee/install/camera:/home/zyme/ros_ws/astrobee/install/config_reader:/home/zyme/ros_ws/astrobee/install/ff_common:/home/zyme/ros_ws/astrobee/install/description:/home/zyme/ros_ws/astrobee/install/astrobee_iss:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_8_5:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_41_5:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_30:/home/zyme/ros_ws/astrobee/install/astrobee_handrail_21_5:/home/zyme/ros_ws/astrobee/install/astrobee_granite:/home/zyme/ros_ws/astrobee/install/astrobee_freeflyer:/home/zyme/ros_ws/astrobee/install/astrobee_dock:/home/zyme/ros_ws/astrobee/install/astrobee')]), 'shell': False}
[0.200571] (-) TimerEvent: {}
[0.224695] (executive_teleop) StdoutLine: {'line': b'\x1b[35m\x1b[1mConsolidate compiler generated dependencies of target teleop_tool\x1b[0m\n'}
[0.263569] (executive_teleop) StdoutLine: {'line': b'[ 50%] \x1b[32mBuilding CXX object CMakeFiles/teleop_tool.dir/src/teleop_tool.cc.o\x1b[0m\n'}
[0.300627] (-) TimerEvent: {}
[0.400985] (-) TimerEvent: {}
[0.501423] (-) TimerEvent: {}
[0.602253] (-) TimerEvent: {}
[0.702692] (-) TimerEvent: {}
[0.803045] (-) TimerEvent: {}
[0.903588] (-) TimerEvent: {}
[1.003968] (-) TimerEvent: {}
[1.104321] (-) TimerEvent: {}
[1.204832] (-) TimerEvent: {}
[1.305107] (-) TimerEvent: {}
[1.405689] (-) TimerEvent: {}
[1.506074] (-) TimerEvent: {}
[1.606659] (-) TimerEvent: {}
[1.707453] (-) TimerEvent: {}
[1.808373] (-) TimerEvent: {}
[1.908845] (-) TimerEvent: {}
[2.009893] (-) TimerEvent: {}
[2.110995] (-) TimerEvent: {}
[2.211991] (-) TimerEvent: {}
[2.312410] (-) TimerEvent: {}
[2.412714] (-) TimerEvent: {}
[2.513008] (-) TimerEvent: {}
[2.613306] (-) TimerEvent: {}
[2.713607] (-) TimerEvent: {}
[2.813874] (-) TimerEvent: {}
[2.914346] (-) TimerEvent: {}
[3.015083] (-) TimerEvent: {}
[3.115322] (-) TimerEvent: {}
[3.215622] (-) TimerEvent: {}
[3.315898] (-) TimerEvent: {}
[3.416284] (-) TimerEvent: {}
[3.516792] (-) TimerEvent: {}
[3.617080] (-) TimerEvent: {}
[3.717446] (-) TimerEvent: {}
[3.817732] (-) TimerEvent: {}
[3.918181] (-) TimerEvent: {}
[4.019028] (-) TimerEvent: {}
[4.119272] (-) TimerEvent: {}
[4.219528] (-) TimerEvent: {}
[4.319820] (-) TimerEvent: {}
[4.420104] (-) TimerEvent: {}
[4.520394] (-) TimerEvent: {}
[4.588349] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:\x1b[m\x1b[K In constructor \xe2\x80\x98\x1b[01m\x1b[Kexecutive_teleop::executive_teleop(int, char**)\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.588987] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:220:109:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ff_msgs::msg::AckStamped_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99 and \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void>, ff_msgs::msg::AckStamped_<std::allocator<void> >, ff_msgs::msg::AckStamped_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99)\n'}
[4.589140] (executive_teleop) StderrLine: {'line': b'  220 |             TOPIC_MANAGEMENT_ACK, 10, std::bind(&executive_teleop::AckCallback, this, std::placeholders::_1)\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[4.589206] (executive_teleop) StderrLine: {'line': b'      |                                                                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[4.589263] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/memory:77\x1b[m\x1b[K,\n'}
[4.589317] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:21\x1b[m\x1b[K:\n'}
[4.589370] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:363:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<const std::shared_ptr<_Yp>&> std::shared_ptr<_Tp>::operator=(const std::shared_ptr<_Yp>&) [with _Yp = _Yp; _Tp = ff_msgs::msg::AckStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.589427] (executive_teleop) StderrLine: {'line': b'  363 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const shared_ptr<_Yp>& __r) noexcept\n'}
[4.589480] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.589533] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:363:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.589586] (executive_teleop) StderrLine: {'line': b'/usr/include/c++/11/bits/shared_ptr.h: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> template<class _Arg> using _Assignable = typename std::enable_if<std::is_assignable<std::__shared_ptr<_Tp>&, _Arg>::value, std::shared_ptr<_Tp>&>::type [with _Arg = const std::shared_ptr<rclcpp::Subscription<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void>, ff_msgs::msg::AckStamped_<std::allocator<void> >, ff_msgs::msg::AckStamped_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void> > > >&; _Tp = ff_msgs::msg::AckStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.589650] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:363:2:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<ff_msgs::msg::AckStamped_<std::allocator<void> > >::_Assignable<const std::shared_ptr<_Tp>&> std::shared_ptr<ff_msgs::msg::AckStamped_<std::allocator<void> > >::operator=<_Yp>(const std::shared_ptr<_Tp>&) [with _Yp = rclcpp::Subscription<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void>, ff_msgs::msg::AckStamped_<std::allocator<void> >, ff_msgs::msg::AckStamped_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.589708] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:220:109:\x1b[m\x1b[K   required from here\n'}
[4.589766] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:130:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, std::shared_ptr<ff_msgs::msg::AckStamped_<std::allocator<void> > >&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.589818] (executive_teleop) StderrLine: {'line': b'  130 |         using \x1b[01;31m\x1b[K_Assignable\x1b[m\x1b[K = typename enable_if<\n'}
[4.589869] (executive_teleop) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.589920] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:374:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<std::auto_ptr<_Up> > std::shared_ptr<_Tp>::operator=(std::auto_ptr<_Up>&&) [with _Yp = _Yp; _Tp = ff_msgs::msg::AckStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.589978] (executive_teleop) StderrLine: {'line': b'  374 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(auto_ptr<_Yp>&& __r)\n'}
[4.590028] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.590077] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:374:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.590130] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:220:109:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void>, ff_msgs::msg::AckStamped_<std::allocator<void> >, ff_msgs::msg::AckStamped_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 is not derived from \xe2\x80\x98\x1b[01m\x1b[Kstd::auto_ptr<_Up>\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.590183] (executive_teleop) StderrLine: {'line': b'  220 |             TOPIC_MANAGEMENT_ACK, 10, std::bind(&executive_teleop::AckCallback, this, std::placeholders::_1)\x1b[01;36m\x1b[K)\x1b[m\x1b[K;\n'}
[4.590232] (executive_teleop) StderrLine: {'line': b'      |                                                                                                             \x1b[01;36m\x1b[K^\x1b[m\x1b[K\n'}
[4.590281] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/memory:77\x1b[m\x1b[K,\n'}
[4.590330] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:21\x1b[m\x1b[K:\n'}
[4.590379] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:391:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<std::shared_ptr<_Yp> > std::shared_ptr<_Tp>::operator=(std::shared_ptr<_Yp>&&) [with _Yp = _Yp; _Tp = ff_msgs::msg::AckStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.590431] (executive_teleop) StderrLine: {'line': b'  391 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(shared_ptr<_Yp>&& __r) noexcept\n'}
[4.590479] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.590528] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:391:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.590577] (executive_teleop) StderrLine: {'line': b'/usr/include/c++/11/bits/shared_ptr.h: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> template<class _Arg> using _Assignable = typename std::enable_if<std::is_assignable<std::__shared_ptr<_Tp>&, _Arg>::value, std::shared_ptr<_Tp>&>::type [with _Arg = std::shared_ptr<rclcpp::Subscription<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void>, ff_msgs::msg::AckStamped_<std::allocator<void> >, ff_msgs::msg::AckStamped_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void> > > >; _Tp = ff_msgs::msg::AckStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.590639] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:391:2:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<ff_msgs::msg::AckStamped_<std::allocator<void> > >::_Assignable<std::shared_ptr<_Tp> > std::shared_ptr<ff_msgs::msg::AckStamped_<std::allocator<void> > >::operator=<_Yp>(std::shared_ptr<_Tp>&&) [with _Yp = rclcpp::Subscription<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void>, ff_msgs::msg::AckStamped_<std::allocator<void> >, ff_msgs::msg::AckStamped_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.590694] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:220:109:\x1b[m\x1b[K   required from here\n'}
[4.590744] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:130:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, std::shared_ptr<ff_msgs::msg::AckStamped_<std::allocator<void> > >&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.590795] (executive_teleop) StderrLine: {'line': b'  130 |         using \x1b[01;31m\x1b[K_Assignable\x1b[m\x1b[K = typename enable_if<\n'}
[4.590844] (executive_teleop) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.590893] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:399:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp, class _Del> std::shared_ptr<_Tp>::_Assignable<std::unique_ptr<_Up, _Ep> > std::shared_ptr<_Tp>::operator=(std::unique_ptr<_Up, _Ep>&&) [with _Yp = _Yp; _Del = _Del; _Tp = ff_msgs::msg::AckStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.590952] (executive_teleop) StderrLine: {'line': b'  399 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(unique_ptr<_Yp, _Del>&& __r)\n'}
[4.591005] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.591054] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:399:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.591106] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:220:109:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void>, ff_msgs::msg::AckStamped_<std::allocator<void> >, ff_msgs::msg::AckStamped_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 is not derived from \xe2\x80\x98\x1b[01m\x1b[Kstd::unique_ptr<_Tp, _Dp>\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.591166] (executive_teleop) StderrLine: {'line': b'  220 |             TOPIC_MANAGEMENT_ACK, 10, std::bind(&executive_teleop::AckCallback, this, std::placeholders::_1)\x1b[01;36m\x1b[K)\x1b[m\x1b[K;\n'}
[4.591216] (executive_teleop) StderrLine: {'line': b'      |                                                                                                             \x1b[01;36m\x1b[K^\x1b[m\x1b[K\n'}
[4.591268] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/memory:77\x1b[m\x1b[K,\n'}
[4.591317] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:21\x1b[m\x1b[K:\n'}
[4.591365] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:359:19:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp>& std::shared_ptr<_Tp>::operator=(const std::shared_ptr<_Tp>&) [with _Tp = ff_msgs::msg::AckStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.591415] (executive_teleop) StderrLine: {'line': b'  359 |       shared_ptr& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const shared_ptr&) noexcept = default;\n'}
[4.591465] (executive_teleop) StderrLine: {'line': b'      |                   \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.591512] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:359:29:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void>, ff_msgs::msg::AckStamped_<std::allocator<void> >, ff_msgs::msg::AckStamped_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kconst std::shared_ptr<ff_msgs::msg::AckStamped_<std::allocator<void> > >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.591568] (executive_teleop) StderrLine: {'line': b'  359 |       shared_ptr& operator=(\x1b[01;36m\x1b[Kconst shared_ptr&\x1b[m\x1b[K) noexcept = default;\n'}
[4.591616] (executive_teleop) StderrLine: {'line': b'      |                             \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.591665] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:383:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp>& std::shared_ptr<_Tp>::operator=(std::shared_ptr<_Tp>&&) [with _Tp = ff_msgs::msg::AckStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.591715] (executive_teleop) StderrLine: {'line': b'  383 |       \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(shared_ptr&& __r) noexcept\n'}
[4.591764] (executive_teleop) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.591812] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:383:30:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void>, ff_msgs::msg::AckStamped_<std::allocator<void> >, ff_msgs::msg::AckStamped_<std::allocator<void> >, rclcpp::message_memory_strategy::MessageMemoryStrategy<ff_msgs::msg::AckStamped_<std::allocator<void> >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ff_msgs::msg::AckStamped_<std::allocator<void> > >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.591869] (executive_teleop) StderrLine: {'line': b'  383 |       operator=(\x1b[01;36m\x1b[Kshared_ptr&& __r\x1b[m\x1b[K) noexcept\n'}
[4.591917] (executive_teleop) StderrLine: {'line': b'      |                 \x1b[01;36m\x1b[K~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[4.591965] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:224:18:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kclass std::shared_ptr<ff_msgs::msg::AckStamped_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99 has no member named \xe2\x80\x98\x1b[01m\x1b[KgetNumPublishers\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.592015] (executive_teleop) StderrLine: {'line': b'  224 |   while (ack_sub.\x1b[01;31m\x1b[KgetNumPublishers\x1b[m\x1b[K() == 0) {\n'}
[4.592067] (executive_teleop) StderrLine: {'line': b'      |                  \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.620522] (-) TimerEvent: {}
[4.665232] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:269:111:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99 and \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99)\n'}
[4.665716] (executive_teleop) StderrLine: {'line': b'  269 |                                    std::bind(&executive_teleop::AgentStateCallback,this,std::placeholders::_1)\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[4.665783] (executive_teleop) StderrLine: {'line': b'      |                                                                                                               \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[4.665837] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/memory:77\x1b[m\x1b[K,\n'}
[4.665888] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:21\x1b[m\x1b[K:\n'}
[4.665937] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:363:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<const std::shared_ptr<_Yp>&> std::shared_ptr<_Tp>::operator=(const std::shared_ptr<_Yp>&) [with _Yp = _Yp; _Tp = ff_msgs::msg::AgentStateStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.665990] (executive_teleop) StderrLine: {'line': b'  363 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const shared_ptr<_Yp>& __r) noexcept\n'}
[4.666039] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.666086] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:363:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.666134] (executive_teleop) StderrLine: {'line': b'/usr/include/c++/11/bits/shared_ptr.h: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> template<class _Arg> using _Assignable = typename std::enable_if<std::is_assignable<std::__shared_ptr<_Tp>&, _Arg>::value, std::shared_ptr<_Tp>&>::type [with _Arg = const std::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > > >&; _Tp = ff_msgs::msg::AgentStateStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.666196] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:363:2:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >::_Assignable<const std::shared_ptr<_Tp>&> std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >::operator=<_Yp>(const std::shared_ptr<_Tp>&) [with _Yp = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.666255] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:269:111:\x1b[m\x1b[K   required from here\n'}
[4.666304] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:130:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.666354] (executive_teleop) StderrLine: {'line': b'  130 |         using \x1b[01;31m\x1b[K_Assignable\x1b[m\x1b[K = typename enable_if<\n'}
[4.666401] (executive_teleop) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.666451] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:374:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<std::auto_ptr<_Up> > std::shared_ptr<_Tp>::operator=(std::auto_ptr<_Up>&&) [with _Yp = _Yp; _Tp = ff_msgs::msg::AgentStateStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.666501] (executive_teleop) StderrLine: {'line': b'  374 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(auto_ptr<_Yp>&& __r)\n'}
[4.666549] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.666596] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:374:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.666649] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:269:111:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 is not derived from \xe2\x80\x98\x1b[01m\x1b[Kstd::auto_ptr<_Up>\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.666708] (executive_teleop) StderrLine: {'line': b'  269 |                                    std::bind(&executive_teleop::AgentStateCallback,this,std::placeholders::_1)\x1b[01;36m\x1b[K)\x1b[m\x1b[K;\n'}
[4.666756] (executive_teleop) StderrLine: {'line': b'      |                                                                                                               \x1b[01;36m\x1b[K^\x1b[m\x1b[K\n'}
[4.666804] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/memory:77\x1b[m\x1b[K,\n'}
[4.666852] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:21\x1b[m\x1b[K:\n'}
[4.666900] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:391:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<std::shared_ptr<_Yp> > std::shared_ptr<_Tp>::operator=(std::shared_ptr<_Yp>&&) [with _Yp = _Yp; _Tp = ff_msgs::msg::AgentStateStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.666954] (executive_teleop) StderrLine: {'line': b'  391 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(shared_ptr<_Yp>&& __r) noexcept\n'}
[4.667001] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.667048] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:391:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.667230] (executive_teleop) StderrLine: {'line': b'/usr/include/c++/11/bits/shared_ptr.h: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> template<class _Arg> using _Assignable = typename std::enable_if<std::is_assignable<std::__shared_ptr<_Tp>&, _Arg>::value, std::shared_ptr<_Tp>&>::type [with _Arg = std::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > > >; _Tp = ff_msgs::msg::AgentStateStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.667291] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:391:2:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >::_Assignable<std::shared_ptr<_Tp> > std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >::operator=<_Yp>(std::shared_ptr<_Tp>&&) [with _Yp = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.667348] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:269:111:\x1b[m\x1b[K   required from here\n'}
[4.667396] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:130:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.667446] (executive_teleop) StderrLine: {'line': b'  130 |         using \x1b[01;31m\x1b[K_Assignable\x1b[m\x1b[K = typename enable_if<\n'}
[4.667494] (executive_teleop) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.667542] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:399:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp, class _Del> std::shared_ptr<_Tp>::_Assignable<std::unique_ptr<_Up, _Ep> > std::shared_ptr<_Tp>::operator=(std::unique_ptr<_Up, _Ep>&&) [with _Yp = _Yp; _Del = _Del; _Tp = ff_msgs::msg::AgentStateStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.667593] (executive_teleop) StderrLine: {'line': b'  399 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(unique_ptr<_Yp, _Del>&& __r)\n'}
[4.667644] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.667691] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:399:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.667742] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:269:111:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 is not derived from \xe2\x80\x98\x1b[01m\x1b[Kstd::unique_ptr<_Tp, _Dp>\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.667800] (executive_teleop) StderrLine: {'line': b'  269 |                                    std::bind(&executive_teleop::AgentStateCallback,this,std::placeholders::_1)\x1b[01;36m\x1b[K)\x1b[m\x1b[K;\n'}
[4.667848] (executive_teleop) StderrLine: {'line': b'      |                                                                                                               \x1b[01;36m\x1b[K^\x1b[m\x1b[K\n'}
[4.667895] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/memory:77\x1b[m\x1b[K,\n'}
[4.667943] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:21\x1b[m\x1b[K:\n'}
[4.667991] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:359:19:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp>& std::shared_ptr<_Tp>::operator=(const std::shared_ptr<_Tp>&) [with _Tp = ff_msgs::msg::AgentStateStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.668043] (executive_teleop) StderrLine: {'line': b'  359 |       shared_ptr& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const shared_ptr&) noexcept = default;\n'}
[4.668090] (executive_teleop) StderrLine: {'line': b'      |                   \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.668137] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:359:29:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kconst std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.668188] (executive_teleop) StderrLine: {'line': b'  359 |       shared_ptr& operator=(\x1b[01;36m\x1b[Kconst shared_ptr&\x1b[m\x1b[K) noexcept = default;\n'}
[4.668235] (executive_teleop) StderrLine: {'line': b'      |                             \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.668283] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:383:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp>& std::shared_ptr<_Tp>::operator=(std::shared_ptr<_Tp>&&) [with _Tp = ff_msgs::msg::AgentStateStamped_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.668332] (executive_teleop) StderrLine: {'line': b'  383 |       \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(shared_ptr&& __r) noexcept\n'}
[4.668379] (executive_teleop) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.668426] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:383:30:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.668484] (executive_teleop) StderrLine: {'line': b'  383 |       operator=(\x1b[01;36m\x1b[Kshared_ptr&& __r\x1b[m\x1b[K) noexcept\n'}
[4.668531] (executive_teleop) StderrLine: {'line': b'      |                 \x1b[01;36m\x1b[K~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[4.707978] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:276:112:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99 and \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99)\n'}
[4.708746] (executive_teleop) StderrLine: {'line': b'  276 |                                     std::bind(&executive_teleop::FaultStateCallback,this,std::placeholders::_1)\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[4.709051] (executive_teleop) StderrLine: {'line': b'      |                                                                                                                \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[4.709336] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/memory:77\x1b[m\x1b[K,\n'}
[4.709550] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:21\x1b[m\x1b[K:\n'}
[4.709754] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:363:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<const std::shared_ptr<_Yp>&> std::shared_ptr<_Tp>::operator=(const std::shared_ptr<_Yp>&) [with _Yp = _Yp; _Tp = ff_msgs::msg::FaultState_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.709896] (executive_teleop) StderrLine: {'line': b'  363 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const shared_ptr<_Yp>& __r) noexcept\n'}
[4.709974] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.710028] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:363:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.710095] (executive_teleop) StderrLine: {'line': b'/usr/include/c++/11/bits/shared_ptr.h: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> template<class _Arg> using _Assignable = typename std::enable_if<std::is_assignable<std::__shared_ptr<_Tp>&, _Arg>::value, std::shared_ptr<_Tp>&>::type [with _Arg = const std::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > > >&; _Tp = ff_msgs::msg::FaultState_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.710189] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:363:2:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >::_Assignable<const std::shared_ptr<_Tp>&> std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >::operator=<_Yp>(const std::shared_ptr<_Tp>&) [with _Yp = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.710258] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:276:112:\x1b[m\x1b[K   required from here\n'}
[4.710322] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:130:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.710388] (executive_teleop) StderrLine: {'line': b'  130 |         using \x1b[01;31m\x1b[K_Assignable\x1b[m\x1b[K = typename enable_if<\n'}
[4.710449] (executive_teleop) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.710518] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:374:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<std::auto_ptr<_Up> > std::shared_ptr<_Tp>::operator=(std::auto_ptr<_Up>&&) [with _Yp = _Yp; _Tp = ff_msgs::msg::FaultState_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.710585] (executive_teleop) StderrLine: {'line': b'  374 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(auto_ptr<_Yp>&& __r)\n'}
[4.710647] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.710707] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:374:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.710767] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:276:112:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 is not derived from \xe2\x80\x98\x1b[01m\x1b[Kstd::auto_ptr<_Up>\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.710843] (executive_teleop) StderrLine: {'line': b'  276 |                                     std::bind(&executive_teleop::FaultStateCallback,this,std::placeholders::_1)\x1b[01;36m\x1b[K)\x1b[m\x1b[K;\n'}
[4.710907] (executive_teleop) StderrLine: {'line': b'      |                                                                                                                \x1b[01;36m\x1b[K^\x1b[m\x1b[K\n'}
[4.710971] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/memory:77\x1b[m\x1b[K,\n'}
[4.711031] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:21\x1b[m\x1b[K:\n'}
[4.711097] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:391:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<std::shared_ptr<_Yp> > std::shared_ptr<_Tp>::operator=(std::shared_ptr<_Yp>&&) [with _Yp = _Yp; _Tp = ff_msgs::msg::FaultState_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.711181] (executive_teleop) StderrLine: {'line': b'  391 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(shared_ptr<_Yp>&& __r) noexcept\n'}
[4.711235] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.711308] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:391:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.711369] (executive_teleop) StderrLine: {'line': b'/usr/include/c++/11/bits/shared_ptr.h: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> template<class _Arg> using _Assignable = typename std::enable_if<std::is_assignable<std::__shared_ptr<_Tp>&, _Arg>::value, std::shared_ptr<_Tp>&>::type [with _Arg = std::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > > >; _Tp = ff_msgs::msg::FaultState_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.711438] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:391:2:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >::_Assignable<std::shared_ptr<_Tp> > std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >::operator=<_Yp>(std::shared_ptr<_Tp>&&) [with _Yp = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.711531] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:276:112:\x1b[m\x1b[K   required from here\n'}
[4.711617] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:130:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.711710] (executive_teleop) StderrLine: {'line': b'  130 |         using \x1b[01;31m\x1b[K_Assignable\x1b[m\x1b[K = typename enable_if<\n'}
[4.711767] (executive_teleop) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.711818] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:399:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp, class _Del> std::shared_ptr<_Tp>::_Assignable<std::unique_ptr<_Up, _Ep> > std::shared_ptr<_Tp>::operator=(std::unique_ptr<_Up, _Ep>&&) [with _Yp = _Yp; _Del = _Del; _Tp = ff_msgs::msg::FaultState_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.711903] (executive_teleop) StderrLine: {'line': b'  399 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(unique_ptr<_Yp, _Del>&& __r)\n'}
[4.711999] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.712115] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:399:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.712275] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:276:112:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 is not derived from \xe2\x80\x98\x1b[01m\x1b[Kstd::unique_ptr<_Tp, _Dp>\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.712441] (executive_teleop) StderrLine: {'line': b'  276 |                                     std::bind(&executive_teleop::FaultStateCallback,this,std::placeholders::_1)\x1b[01;36m\x1b[K)\x1b[m\x1b[K;\n'}
[4.712586] (executive_teleop) StderrLine: {'line': b'      |                                                                                                                \x1b[01;36m\x1b[K^\x1b[m\x1b[K\n'}
[4.712728] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/memory:77\x1b[m\x1b[K,\n'}
[4.712871] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:21\x1b[m\x1b[K:\n'}
[4.713046] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:359:19:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp>& std::shared_ptr<_Tp>::operator=(const std::shared_ptr<_Tp>&) [with _Tp = ff_msgs::msg::FaultState_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.713144] (executive_teleop) StderrLine: {'line': b'  359 |       shared_ptr& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const shared_ptr&) noexcept = default;\n'}
[4.713218] (executive_teleop) StderrLine: {'line': b'      |                   \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.713269] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:359:29:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kconst std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.713347] (executive_teleop) StderrLine: {'line': b'  359 |       shared_ptr& operator=(\x1b[01;36m\x1b[Kconst shared_ptr&\x1b[m\x1b[K) noexcept = default;\n'}
[4.713420] (executive_teleop) StderrLine: {'line': b'      |                             \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.713499] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:383:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp>& std::shared_ptr<_Tp>::operator=(std::shared_ptr<_Tp>&&) [with _Tp = ff_msgs::msg::FaultState_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.713585] (executive_teleop) StderrLine: {'line': b'  383 |       \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(shared_ptr&& __r) noexcept\n'}
[4.713658] (executive_teleop) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.713763] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:383:30:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.713859] (executive_teleop) StderrLine: {'line': b'  383 |       operator=(\x1b[01;36m\x1b[Kshared_ptr&& __r\x1b[m\x1b[K) noexcept\n'}
[4.713942] (executive_teleop) StderrLine: {'line': b'      |                 \x1b[01;36m\x1b[K~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[4.720653] (-) TimerEvent: {}
[4.774535] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:282:187:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99 and \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99)\n'}
[4.775043] (executive_teleop) StderrLine: {'line': b'  282 | gs::action::Motion_FeedbackMessage::SharedPtr>(topic_name, 10, std::bind(&executive_teleop::MoveFeedbackCallback,this,std::placeholders::_1)\x1b[01;31m\x1b[K)\x1b[m\x1b[K;\n'}
[4.775368] (executive_teleop) StderrLine: {'line': b'      |                                                                                                                                             \x1b[01;31m\x1b[K^\x1b[m\x1b[K\n'}
[4.775506] (executive_teleop) StderrLine: {'line': b'\n'}
[4.775639] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/memory:77\x1b[m\x1b[K,\n'}
[4.775746] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:21\x1b[m\x1b[K:\n'}
[4.775837] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:363:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<const std::shared_ptr<_Yp>&> std::shared_ptr<_Tp>::operator=(const std::shared_ptr<_Yp>&) [with _Yp = _Yp; _Tp = ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.775943] (executive_teleop) StderrLine: {'line': b'  363 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const shared_ptr<_Yp>& __r) noexcept\n'}
[4.776040] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.776129] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:363:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.776231] (executive_teleop) StderrLine: {'line': b'/usr/include/c++/11/bits/shared_ptr.h: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> template<class _Arg> using _Assignable = typename std::enable_if<std::is_assignable<std::__shared_ptr<_Tp>&, _Arg>::value, std::shared_ptr<_Tp>&>::type [with _Arg = const std::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > > >&; _Tp = ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.776353] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:363:2:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >::_Assignable<const std::shared_ptr<_Tp>&> std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >::operator=<_Yp>(const std::shared_ptr<_Tp>&) [with _Yp = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.776456] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:282:187:\x1b[m\x1b[K   required from here\n'}
[4.776552] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:130:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.776655] (executive_teleop) StderrLine: {'line': b'  130 |         using \x1b[01;31m\x1b[K_Assignable\x1b[m\x1b[K = typename enable_if<\n'}
[4.776743] (executive_teleop) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.776831] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:374:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<std::auto_ptr<_Up> > std::shared_ptr<_Tp>::operator=(std::auto_ptr<_Up>&&) [with _Yp = _Yp; _Tp = ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.776962] (executive_teleop) StderrLine: {'line': b'  374 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(auto_ptr<_Yp>&& __r)\n'}
[4.777069] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.777174] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:374:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.777241] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:282:187:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 is not derived from \xe2\x80\x98\x1b[01m\x1b[Kstd::auto_ptr<_Up>\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.777326] (executive_teleop) StderrLine: {'line': b'  282 | gs::action::Motion_FeedbackMessage::SharedPtr>(topic_name, 10, std::bind(&executive_teleop::MoveFeedbackCallback,this,std::placeholders::_1)\x1b[01;36m\x1b[K)\x1b[m\x1b[K;\n'}
[4.777379] (executive_teleop) StderrLine: {'line': b'      |                                                                                                                                             \x1b[01;36m\x1b[K^\x1b[m\x1b[K\n'}
[4.777434] (executive_teleop) StderrLine: {'line': b'\n'}
[4.777486] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/memory:77\x1b[m\x1b[K,\n'}
[4.777536] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:21\x1b[m\x1b[K:\n'}
[4.777586] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:391:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<_Tp>::_Assignable<std::shared_ptr<_Yp> > std::shared_ptr<_Tp>::operator=(std::shared_ptr<_Yp>&&) [with _Yp = _Yp; _Tp = ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.777657] (executive_teleop) StderrLine: {'line': b'  391 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(shared_ptr<_Yp>&& __r) noexcept\n'}
[4.777709] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.777761] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:391:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.777814] (executive_teleop) StderrLine: {'line': b'/usr/include/c++/11/bits/shared_ptr.h: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> template<class _Arg> using _Assignable = typename std::enable_if<std::is_assignable<std::__shared_ptr<_Tp>&, _Arg>::value, std::shared_ptr<_Tp>&>::type [with _Arg = std::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > > >; _Tp = ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.777874] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:391:2:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp> std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >::_Assignable<std::shared_ptr<_Tp> > std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >::operator=<_Yp>(std::shared_ptr<_Tp>&&) [with _Yp = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.777939] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:282:187:\x1b[m\x1b[K   required from here\n'}
[4.777994] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:130:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&>\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.778060] (executive_teleop) StderrLine: {'line': b'  130 |         using \x1b[01;31m\x1b[K_Assignable\x1b[m\x1b[K = typename enable_if<\n'}
[4.778134] (executive_teleop) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.778196] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:399:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Yp, class _Del> std::shared_ptr<_Tp>::_Assignable<std::unique_ptr<_Up, _Ep> > std::shared_ptr<_Tp>::operator=(std::unique_ptr<_Up, _Ep>&&) [with _Yp = _Yp; _Del = _Del; _Tp = ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.778279] (executive_teleop) StderrLine: {'line': b'  399 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(unique_ptr<_Yp, _Del>&& __r)\n'}
[4.778339] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.778406] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:399:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.778497] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:282:187:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 is not derived from \xe2\x80\x98\x1b[01m\x1b[Kstd::unique_ptr<_Tp, _Dp>\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.778651] (executive_teleop) StderrLine: {'line': b'  282 | gs::action::Motion_FeedbackMessage::SharedPtr>(topic_name, 10, std::bind(&executive_teleop::MoveFeedbackCallback,this,std::placeholders::_1)\x1b[01;36m\x1b[K)\x1b[m\x1b[K;\n'}
[4.778734] (executive_teleop) StderrLine: {'line': b'      |                                                                                                                                             \x1b[01;36m\x1b[K^\x1b[m\x1b[K\n'}
[4.778824] (executive_teleop) StderrLine: {'line': b'\n'}
[4.778921] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/memory:77\x1b[m\x1b[K,\n'}
[4.779010] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:21\x1b[m\x1b[K:\n'}
[4.779130] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:359:19:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp>& std::shared_ptr<_Tp>::operator=(const std::shared_ptr<_Tp>&) [with _Tp = ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.779218] (executive_teleop) StderrLine: {'line': b'  359 |       shared_ptr& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const shared_ptr&) noexcept = default;\n'}
[4.779296] (executive_teleop) StderrLine: {'line': b'      |                   \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.779364] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:359:29:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kconst std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.779472] (executive_teleop) StderrLine: {'line': b'  359 |       shared_ptr& operator=(\x1b[01;36m\x1b[Kconst shared_ptr&\x1b[m\x1b[K) noexcept = default;\n'}
[4.779526] (executive_teleop) StderrLine: {'line': b'      |                             \x1b[01;36m\x1b[K^~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.779600] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:383:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<_Tp>& std::shared_ptr<_Tp>::operator=(std::shared_ptr<_Tp>&&) [with _Tp = ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.779678] (executive_teleop) StderrLine: {'line': b'  383 |       \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(shared_ptr&& __r) noexcept\n'}
[4.779735] (executive_teleop) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.779789] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/shared_ptr.h:383:30:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > > >\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.779851] (executive_teleop) StderrLine: {'line': b'  383 |       operator=(\x1b[01;36m\x1b[Kshared_ptr&& __r\x1b[m\x1b[K) noexcept\n'}
[4.779908] (executive_teleop) StderrLine: {'line': b'      |                 \x1b[01;36m\x1b[K~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[4.779965] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:288:137:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[KDockFeedbbackCallback\x1b[m\x1b[K\xe2\x80\x99 is not a member of \xe2\x80\x98\x1b[01m\x1b[Kexecutive_teleop\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.780035] (executive_teleop) StderrLine: {'line': b'  288 | ock_sub = this->create_subscription<ff_msgs::action::Dock_FeedbackMessage::SharedPtr>(topic_name, 10, std::bind(&executive_teleop::\x1b[01;31m\x1b[KDockFeedbbackCallback\x1b[m\x1b[K,this,std::placeholders::_1));\n'}
[4.780112] (executive_teleop) StderrLine: {'line': b'      |                                                                                                                                    \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.780176] (executive_teleop) StderrLine: {'line': b'\n'}
[4.780232] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:291:21:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kclass std::shared_ptr<ff_msgs::action::Dock_FeedbackMessage_<std::allocator<void> > >\x1b[m\x1b[K\xe2\x80\x99 has no member named \xe2\x80\x98\x1b[01m\x1b[KgetNumPublishers\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.780336] (executive_teleop) StderrLine: {'line': b'  291 |     while (dock_sub.\x1b[01;31m\x1b[KgetNumPublishers\x1b[m\x1b[K() == 0) {\n'}
[4.780401] (executive_teleop) StderrLine: {'line': b'      |                     \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.780640] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kbool executive_teleop::Finished()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.780711] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:324:1:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kno return statement in function returning non-void [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wreturn-type\x07-Wreturn-type\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[4.780768] (executive_teleop) StderrLine: {'line': b'  324 | \x1b[01;35m\x1b[K}\x1b[m\x1b[K\n'}
[4.780822] (executive_teleop) StderrLine: {'line': b'      | \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[4.820746] (-) TimerEvent: {}
[4.823917] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kbool executive_teleop::SendMobilityCommand()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.824111] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:599:1:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kno return statement in function returning non-void [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wreturn-type\x07-Wreturn-type\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[4.824177] (executive_teleop) StderrLine: {'line': b'  599 | \x1b[01;35m\x1b[K}\x1b[m\x1b[K\n'}
[4.824231] (executive_teleop) StderrLine: {'line': b'      | \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[4.825185] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kbool executive_teleop::SendResetBias()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.825420] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:614:1:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kno return statement in function returning non-void [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wreturn-type\x07-Wreturn-type\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[4.825507] (executive_teleop) StderrLine: {'line': b'  614 | \x1b[01;35m\x1b[K}\x1b[m\x1b[K\n'}
[4.825570] (executive_teleop) StderrLine: {'line': b'      | \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[4.825949] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kbool executive_teleop::SendResetEkf()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.826175] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:629:1:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kno return statement in function returning non-void [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wreturn-type\x07-Wreturn-type\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[4.826317] (executive_teleop) StderrLine: {'line': b'  629 | \x1b[01;35m\x1b[K}\x1b[m\x1b[K\n'}
[4.826413] (executive_teleop) StderrLine: {'line': b'      | \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[4.829689] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kbool executive_teleop::SendSetCheckZones()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.830100] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:653:1:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kno return statement in function returning non-void [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wreturn-type\x07-Wreturn-type\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[4.830190] (executive_teleop) StderrLine: {'line': b'  653 | \x1b[01;35m\x1b[K}\x1b[m\x1b[K\n'}
[4.830247] (executive_teleop) StderrLine: {'line': b'      | \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[4.832037] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kbool executive_teleop::SendSetFaceForward()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.832248] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:682:1:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kno return statement in function returning non-void [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wreturn-type\x07-Wreturn-type\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[4.832371] (executive_teleop) StderrLine: {'line': b'  682 | \x1b[01;35m\x1b[K}\x1b[m\x1b[K\n'}
[4.832441] (executive_teleop) StderrLine: {'line': b'      | \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[4.833280] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kbool executive_teleop::SendSetOpLimits()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.833528] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:732:1:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kno return statement in function returning non-void [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wreturn-type\x07-Wreturn-type\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[4.833637] (executive_teleop) StderrLine: {'line': b'  732 | \x1b[01;35m\x1b[K}\x1b[m\x1b[K\n'}
[4.833734] (executive_teleop) StderrLine: {'line': b'      | \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[4.835268] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kbool executive_teleop::SendSetPlanner()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.835734] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:752:1:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kno return statement in function returning non-void [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wreturn-type\x07-Wreturn-type\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[4.835954] (executive_teleop) StderrLine: {'line': b'  752 | \x1b[01;35m\x1b[K}\x1b[m\x1b[K\n'}
[4.836059] (executive_teleop) StderrLine: {'line': b'      | \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[4.921037] (-) TimerEvent: {}
[5.021523] (-) TimerEvent: {}
[5.121818] (-) TimerEvent: {}
[5.222100] (-) TimerEvent: {}
[5.322382] (-) TimerEvent: {}
[5.422636] (-) TimerEvent: {}
[5.522930] (-) TimerEvent: {}
[5.623200] (-) TimerEvent: {}
[5.723463] (-) TimerEvent: {}
[5.823774] (-) TimerEvent: {}
[5.924128] (-) TimerEvent: {}
[6.024408] (-) TimerEvent: {}
[6.124648] (-) TimerEvent: {}
[6.222197] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[6.222534] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[6.222599] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[6.222652] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[6.222701] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[6.222775] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[6.223062] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[6.223171] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[6.223232] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[6.223306] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[6.223360] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:29\x1b[m\x1b[K:\n'}
[6.223898] (executive_teleop) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[6.223968] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> >; ROSMessageType = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.224044] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.224128] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.224188] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.224485] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:267:92:\x1b[m\x1b[K   required from here\n'}
[6.224540] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::AnySubscriptionCallbackHelper<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, false>::variant_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >\x1b[m\x1b[K\xe2\x80\x99} and \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>\x1b[m\x1b[K\xe2\x80\x99})\n'}
[6.224665] (-) TimerEvent: {}
[6.224785] (executive_teleop) StderrLine: {'line': b'  394 |       \x1b[01;31m\x1b[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)\x1b[m\x1b[K;\n'}
[6.224892] (executive_teleop) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.225023] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:28\x1b[m\x1b[K,\n'}
[6.225100] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24\x1b[m\x1b[K,\n'}
[6.225173] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[6.225308] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[6.225426] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[6.225513] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[6.225615] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[6.225708] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[6.225792] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[6.225841] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[6.225889] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:29\x1b[m\x1b[K:\n'}
[6.225937] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.226015] (executive_teleop) StderrLine: {'line': b' 1461 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(_Tp&& __rhs)\n'}
[6.226064] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[6.226112] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[6.226163] (executive_teleop) StderrLine: {'line': b'/usr/include/c++/11/variant: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>&&; <template-parameter-2-2> = void; _Types = {std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[6.226240] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1457:14:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.226402] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.226459] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> >; ROSMessageType = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.226523] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.226584] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.226648] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.226704] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:267:92:\x1b[m\x1b[K   required from here\n'}
[6.226753] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1375:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.226806] (executive_teleop) StderrLine: {'line': b' 1375 |         using \x1b[01;31m\x1b[K__accepted_type\x1b[m\x1b[K = __to_type<__accepted_index<_Tp>>;\n'}
[6.226854] (executive_teleop) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.226901] (executive_teleop) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[6.226953] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> >; ROSMessageType = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.227019] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.227079] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.227140] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.227202] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:267:92:\x1b[m\x1b[K   required from here\n'}
[6.227252] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.227321] (executive_teleop) StderrLine: {'line': b' 1398 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const variant&) = default;\n'}
[6.227370] (executive_teleop) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[6.227418] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst std::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.227490] (executive_teleop) StderrLine: {'line': b' 1398 |       variant& operator=(\x1b[01;36m\x1b[Kconst variant&\x1b[m\x1b[K) = default;\n'}
[6.227538] (executive_teleop) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.227585] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.227656] (executive_teleop) StderrLine: {'line': b' 1399 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(variant&&) = default;\n'}
[6.227705] (executive_teleop) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[6.227753] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const ff_msgs::msg::AgentStateStamped_<std::allocator<void> >&)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::AgentStateStamped_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.227838] (executive_teleop) StderrLine: {'line': b' 1399 |       variant& operator=(\x1b[01;36m\x1b[Kvariant&&\x1b[m\x1b[K) = default;\n'}
[6.227890] (executive_teleop) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[6.246811] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[6.247065] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[6.247176] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[6.247266] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[6.247320] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[6.247373] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[6.247428] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[6.247761] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[6.248051] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[6.248252] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[6.248347] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:29\x1b[m\x1b[K:\n'}
[6.248436] (executive_teleop) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[6.248530] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> >; ROSMessageType = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.248644] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.248762] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.248860] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.248994] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:274:85:\x1b[m\x1b[K   required from here\n'}
[6.249104] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::AnySubscriptionCallbackHelper<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, false>::variant_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >\x1b[m\x1b[K\xe2\x80\x99} and \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>\x1b[m\x1b[K\xe2\x80\x99})\n'}
[6.249264] (executive_teleop) StderrLine: {'line': b'  394 |       \x1b[01;31m\x1b[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)\x1b[m\x1b[K;\n'}
[6.249361] (executive_teleop) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.249451] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:28\x1b[m\x1b[K,\n'}
[6.249540] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24\x1b[m\x1b[K,\n'}
[6.249629] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[6.249718] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[6.249806] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[6.249895] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[6.249983] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[6.250075] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[6.250204] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[6.250290] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[6.250376] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:29\x1b[m\x1b[K:\n'}
[6.250462] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.250584] (executive_teleop) StderrLine: {'line': b' 1461 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(_Tp&& __rhs)\n'}
[6.250672] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[6.250761] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[6.250851] (executive_teleop) StderrLine: {'line': b'/usr/include/c++/11/variant: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>&&; <template-parameter-2-2> = void; _Types = {std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[6.250958] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1457:14:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.251150] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.251215] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> >; ROSMessageType = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.251290] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.251369] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.251435] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.251509] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:274:85:\x1b[m\x1b[K   required from here\n'}
[6.251566] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1375:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.251626] (executive_teleop) StderrLine: {'line': b' 1375 |         using \x1b[01;31m\x1b[K__accepted_type\x1b[m\x1b[K = __to_type<__accepted_index<_Tp>>;\n'}
[6.251687] (executive_teleop) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.251744] (executive_teleop) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[6.251805] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> >; ROSMessageType = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.251873] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.251953] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.252020] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.252104] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:274:85:\x1b[m\x1b[K   required from here\n'}
[6.252160] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.252240] (executive_teleop) StderrLine: {'line': b' 1398 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const variant&) = default;\n'}
[6.252297] (executive_teleop) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[6.252354] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst std::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.252459] (executive_teleop) StderrLine: {'line': b' 1398 |       variant& operator=(\x1b[01;36m\x1b[Kconst variant&\x1b[m\x1b[K) = default;\n'}
[6.252519] (executive_teleop) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.252574] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.252659] (executive_teleop) StderrLine: {'line': b' 1399 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(variant&&) = default;\n'}
[6.252719] (executive_teleop) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[6.252775] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const ff_msgs::msg::FaultState_<std::allocator<void> >&)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::msg::FaultState_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.252854] (executive_teleop) StderrLine: {'line': b' 1399 |       variant& operator=(\x1b[01;36m\x1b[Kvariant&&\x1b[m\x1b[K) = default;\n'}
[6.252909] (executive_teleop) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[6.275496] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[6.276288] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[6.276402] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[6.276502] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[6.276632] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[6.276869] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[6.277156] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[6.277394] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[6.277499] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[6.277585] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[6.277671] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:29\x1b[m\x1b[K:\n'}
[6.277756] (executive_teleop) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[6.277853] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> >; ROSMessageType = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.277955] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.278073] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.278187] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.278296] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:282:93:\x1b[m\x1b[K   required from here\n'}
[6.278392] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno match for \xe2\x80\x98\x1b[01m\x1b[Koperator=\x1b[m\x1b[K\xe2\x80\x99 (operand types are \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::AnySubscriptionCallbackHelper<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, false>::variant_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >\x1b[m\x1b[K\xe2\x80\x99} and \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>\x1b[m\x1b[K\xe2\x80\x99})\n'}
[6.278526] (executive_teleop) StderrLine: {'line': b'  394 |       \x1b[01;31m\x1b[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)\x1b[m\x1b[K;\n'}
[6.278622] (executive_teleop) StderrLine: {'line': b'      |       \x1b[01;31m\x1b[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.278719] (executive_teleop) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:28\x1b[m\x1b[K,\n'}
[6.278814] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24\x1b[m\x1b[K,\n'}
[6.278910] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[6.279005] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[6.279100] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[6.279201] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[6.279287] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[6.279376] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[6.279462] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[6.279547] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[6.279633] (executive_teleop) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:29\x1b[m\x1b[K:\n'}
[6.279718] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.279834] (executive_teleop) StderrLine: {'line': b' 1461 |         \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(_Tp&& __rhs)\n'}
[6.279921] (executive_teleop) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[6.280006] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1461:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[6.280093] (executive_teleop) StderrLine: {'line': b'/usr/include/c++/11/variant: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>&&; <template-parameter-2-2> = void; _Types = {std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[6.280207] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1457:14:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.280509] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.280603] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> >; ROSMessageType = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.280709] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.280810] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.280909] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.281010] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:282:93:\x1b[m\x1b[K   required from here\n'}
[6.281063] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1375:15:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.281116] (executive_teleop) StderrLine: {'line': b' 1375 |         using \x1b[01;31m\x1b[K__accepted_type\x1b[m\x1b[K = __to_type<__accepted_index<_Tp>>;\n'}
[6.281166] (executive_teleop) StderrLine: {'line': b'      |               \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.281216] (executive_teleop) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[6.281270] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> >; ROSMessageType = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.281337] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.281404] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.281467] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >; CallbackT = std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void>, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.281535] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:282:93:\x1b[m\x1b[K   required from here\n'}
[6.281586] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.281659] (executive_teleop) StderrLine: {'line': b' 1398 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(const variant&) = default;\n'}
[6.281711] (executive_teleop) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[6.281760] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1398:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kconst std::variant<std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.281834] (executive_teleop) StderrLine: {'line': b' 1398 |       variant& operator=(\x1b[01;36m\x1b[Kconst variant&\x1b[m\x1b[K) = default;\n'}
[6.281885] (executive_teleop) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[6.281938] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.282012] (executive_teleop) StderrLine: {'line': b' 1399 |       variant& \x1b[01;36m\x1b[Koperator\x1b[m\x1b[K=(variant&&) = default;\n'}
[6.282063] (executive_teleop) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[6.282112] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/variant:1399:26:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::detail::SubscriptionCallbackTypeHelper<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::_Bind<void (executive_teleop::*(executive_teleop*, std::_Placeholder<1>))(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>, void>::callback_type\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> >&)>\x1b[m\x1b[K\xe2\x80\x99} to \xe2\x80\x98\x1b[01m\x1b[Kstd::variant<std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >)>, std::function<void(std::unique_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > >, std::default_delete<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&)>, std::function<void(const std::shared_ptr<const std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >)>, std::function<void(std::shared_ptr<std::shared_ptr<ff_msgs::action::Motion_FeedbackMessage_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[6.282189] (executive_teleop) StderrLine: {'line': b' 1399 |       variant& operator=(\x1b[01;36m\x1b[Kvariant&&\x1b[m\x1b[K) = default;\n'}
[6.282239] (executive_teleop) StderrLine: {'line': b'      |                          \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[6.324802] (-) TimerEvent: {}
[6.425092] (-) TimerEvent: {}
[6.525365] (-) TimerEvent: {}
[6.625627] (-) TimerEvent: {}
[6.725950] (-) TimerEvent: {}
[6.826197] (-) TimerEvent: {}
[6.926712] (-) TimerEvent: {}
[7.027538] (-) TimerEvent: {}
[7.127826] (-) TimerEvent: {}
[7.228215] (-) TimerEvent: {}
[7.328597] (-) TimerEvent: {}
[7.429001] (-) TimerEvent: {}
[7.529366] (-) TimerEvent: {}
[7.629790] (-) TimerEvent: {}
[7.730568] (-) TimerEvent: {}
[7.830886] (-) TimerEvent: {}
[7.931177] (-) TimerEvent: {}
[8.031513] (-) TimerEvent: {}
[8.131906] (-) TimerEvent: {}
[8.232209] (-) TimerEvent: {}
[8.332546] (-) TimerEvent: {}
[8.432848] (-) TimerEvent: {}
[8.533192] (-) TimerEvent: {}
[8.633481] (-) TimerEvent: {}
[8.733896] (-) TimerEvent: {}
[8.834542] (-) TimerEvent: {}
[8.934836] (-) TimerEvent: {}
[9.035131] (-) TimerEvent: {}
[9.135558] (-) TimerEvent: {}
[9.236040] (-) TimerEvent: {}
[9.336373] (-) TimerEvent: {}
[9.436899] (-) TimerEvent: {}
[9.537410] (-) TimerEvent: {}
[9.637777] (-) TimerEvent: {}
[9.738100] (-) TimerEvent: {}
[9.838399] (-) TimerEvent: {}
[9.938875] (-) TimerEvent: {}
[10.039398] (-) TimerEvent: {}
[10.139679] (-) TimerEvent: {}
[10.239973] (-) TimerEvent: {}
[10.340300] (-) TimerEvent: {}
[10.440603] (-) TimerEvent: {}
[10.540935] (-) TimerEvent: {}
[10.641313] (-) TimerEvent: {}
[10.741665] (-) TimerEvent: {}
[10.842007] (-) TimerEvent: {}
[10.927560] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kbool executive_teleop::SendNextCommand()\x1b[m\x1b[K\xe2\x80\x99:\n'}
[10.927794] (executive_teleop) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zyme/ros_ws/executive_teleop/executive_teleop/src/teleop_tool.cc:789:1:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kcontrol reaches end of non-void function [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wreturn-type\x07-Wreturn-type\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[10.927922] (executive_teleop) StderrLine: {'line': b'  789 | \x1b[01;35m\x1b[K}\x1b[m\x1b[K\n'}
[10.928035] (executive_teleop) StderrLine: {'line': b'      | \x1b[01;35m\x1b[K^\x1b[m\x1b[K\n'}
[10.942114] (-) TimerEvent: {}
[11.042473] (-) TimerEvent: {}
[11.102037] (executive_teleop) StderrLine: {'line': b'gmake[2]: *** [CMakeFiles/teleop_tool.dir/build.make:76: CMakeFiles/teleop_tool.dir/src/teleop_tool.cc.o] Error 1\n'}
[11.102343] (executive_teleop) StderrLine: {'line': b'gmake[1]: *** [CMakeFiles/Makefile2:137: CMakeFiles/teleop_tool.dir/all] Error 2\n'}
[11.102570] (executive_teleop) StderrLine: {'line': b'gmake: *** [Makefile:146: all] Error 2\n'}
[11.104664] (executive_teleop) CommandEnded: {'returncode': 2}
[11.142554] (-) TimerEvent: {}
[11.206123] (executive_teleop) JobEnded: {'identifier': 'executive_teleop', 'rc': 2}
[11.225952] (-) EventReactorShutdown: {}
